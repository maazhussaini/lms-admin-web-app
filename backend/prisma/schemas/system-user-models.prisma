// Role model - defines system roles for access control
model Role {
  role_id           Int               @id @default(autoincrement())
  role_type         UserType          @unique
  role_name         String            @db.VarChar(100)
  role_description  String?           @db.Text
  is_system_role    Boolean           @default(false)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int?
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  system_users      SystemUser[]      @relation("UserRole")
  role_screens      RoleScreen[]      @relation("RoleScreenRole")
  created_by_user   SystemUser?       @relation("RoleCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("RoleUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("RoleDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("roles")
}

// Screen model - defines system screens/modules for permission management
model Screen {
  screen_id         Int               @id @default(autoincrement())
  screen_name       String            @db.VarChar(100)
  screen_description String?          @db.Text
  route_path        String?           @db.VarChar(255)
  parent_screen_id  Int?
  sort_order        Int?
  icon_class        String?           @db.VarChar(100)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  parent_screen     Screen?           @relation("ScreenHierarchy", fields: [parent_screen_id], references: [screen_id], onDelete: SetNull)
  child_screens     Screen[]          @relation("ScreenHierarchy")
  user_screens      UserScreen[]
  role_screens      RoleScreen[]
  created_by_user   SystemUser        @relation("ScreenCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("ScreenUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("ScreenDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("screens")
}

// SystemUser model - core user entity with conditional tenant isolation
model SystemUser {
  system_user_id    Int               @id @default(autoincrement())
  tenant_id         Int?              
  role_type         UserType
  username          String            @unique @db.VarChar(50)
  full_name         String            @db.VarChar(255)
  email_address     String            @db.VarChar(255)
  password_hash     String            @db.VarChar(255)
  last_login_at     DateTime?
  login_attempts    Int?              @default(0)
  system_user_status SystemUserStatus @default(ACTIVE)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int?
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  tenant            Tenant?           @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  role              Role              @relation("UserRole", fields: [role_type], references: [role_type], onDelete: Restrict)
  user_screens      UserScreen[]

  // Self-references for audit trails
  created_by_me_users      SystemUser[]      @relation("UserCreatedBy")
  created_by_user          SystemUser?       @relation("UserCreatedBy", fields: [created_by], references: [system_user_id])
  updated_by_me_users      SystemUser[]      @relation("UserUpdatedBy")
  updated_by_user          SystemUser?       @relation("UserUpdatedBy", fields: [updated_by], references: [system_user_id])
  deleted_by_me_users      SystemUser[]      @relation("UserDeletedBy")
  deleted_by_user          SystemUser?       @relation("UserDeletedBy", fields: [deleted_by], references: [system_user_id])

  // Role audit relations
  created_roles            Role[]           @relation("RoleCreatedBy")
  updated_roles            Role[]           @relation("RoleUpdatedBy")
  deleted_roles            Role[]           @relation("RoleDeletedBy")

  // Screen audit relations
  created_screens          Screen[]         @relation("ScreenCreatedBy")
  updated_screens          Screen[]         @relation("ScreenUpdatedBy")
  deleted_screens          Screen[]         @relation("ScreenDeletedBy")

  // UserScreen audit relations
  created_user_screens     UserScreen[]     @relation("UserScreenCreatedBy")
  updated_user_screens     UserScreen[]     @relation("UserScreenUpdatedBy")
  deleted_user_screens     UserScreen[]     @relation("UserScreenDeletedBy")

  // RoleScreen audit relations
  created_role_screens     RoleScreen[]     @relation("RoleScreenCreatedBy")
  updated_role_screens     RoleScreen[]     @relation("RoleScreenUpdatedBy")
  deleted_role_screens     RoleScreen[]     @relation("RoleScreenDeletedBy")

  // Tenant audit relations
  created_tenants            Tenant[]               @relation("TenantCreatedBy")
  updated_tenants            Tenant[]               @relation("TenantUpdatedBy")
  deleted_tenants            Tenant[]               @relation("TenantDeletedBy")
  
  // Client audit relations
  created_clients            Client[]               @relation("ClientCreatedBy")
  updated_clients            Client[]               @relation("ClientUpdatedBy")
  deleted_clients            Client[]               @relation("ClientDeletedBy")
  
  // TenantPhoneNumber audit relations
  created_tenant_phones      TenantPhoneNumber[]    @relation("TenantPhoneNumberCreatedBy")
  updated_tenant_phones      TenantPhoneNumber[]    @relation("TenantPhoneNumberUpdatedBy")
  deleted_tenant_phones      TenantPhoneNumber[]    @relation("TenantPhoneNumberDeletedBy")
  
  // TenantEmailAddress audit relations
  created_tenant_emails      TenantEmailAddress[]   @relation("TenantEmailAddressCreatedBy")
  updated_tenant_emails      TenantEmailAddress[]   @relation("TenantEmailAddressUpdatedBy")
  deleted_tenant_emails      TenantEmailAddress[]   @relation("TenantEmailAddressDeletedBy")
  
  // ClientTenant audit relations
  created_client_tenants     ClientTenant[]         @relation("ClientTenantCreatedBy")
  updated_client_tenants     ClientTenant[]         @relation("ClientTenantUpdatedBy")
  deleted_client_tenants     ClientTenant[]         @relation("ClientTenantDeletedBy")

  // Country audit relations
  created_countries        Country[]         @relation("CountryCreatedBy")
  updated_countries        Country[]         @relation("CountryUpdatedBy")
  deleted_countries        Country[]         @relation("CountryDeletedBy")

  // State audit relations
  created_states           State[]           @relation("StateCreatedBy")
  updated_states           State[]           @relation("StateUpdatedBy")
  deleted_states           State[]           @relation("StateDeletedBy")

  // City audit relations
  created_cities           City[]            @relation("CityCreatedBy")
  updated_cities           City[]            @relation("CityUpdatedBy")
  deleted_cities           City[]            @relation("CityDeletedBy")

  // Teacher-related relations
  created_teachers           Teacher[]                @relation("TeacherCreatedBy")
  updated_teachers           Teacher[]                @relation("TeacherUpdatedBy")
  deleted_teachers           Teacher[]                @relation("TeacherDeletedBy")
  created_teacher_emails     TeacherEmailAddress[]    @relation("TeacherEmailAddressCreatedBy")
  updated_teacher_emails     TeacherEmailAddress[]    @relation("TeacherEmailAddressUpdatedBy")
  deleted_teacher_emails     TeacherEmailAddress[]    @relation("TeacherEmailAddressDeletedBy")
  created_teacher_phones     TeacherPhoneNumber[]     @relation("TeacherPhoneNumberCreatedBy")
  updated_teacher_phones     TeacherPhoneNumber[]     @relation("TeacherPhoneNumberUpdatedBy")
  deleted_teacher_phones     TeacherPhoneNumber[]     @relation("TeacherPhoneNumberDeletedBy")

  // Student-related relations
  created_students           Student[]                @relation("StudentCreatedBy") 
  updated_students           Student[]                @relation("StudentUpdatedBy")
  deleted_students           Student[]                @relation("StudentDeletedBy")
  created_student_emails     StudentEmailAddress[]    @relation("StudentEmailAddressCreatedBy")
  updated_student_emails     StudentEmailAddress[]    @relation("StudentEmailAddressUpdatedBy")
  deleted_student_emails     StudentEmailAddress[]    @relation("StudentEmailAddressDeletedBy") 
  created_student_phones     StudentPhoneNumber[]     @relation("StudentPhoneNumberCreatedBy")
  updated_student_phones     StudentPhoneNumber[]     @relation("StudentPhoneNumberUpdatedBy")
  deleted_student_phones     StudentPhoneNumber[]     @relation("StudentPhoneNumberDeletedBy")
  created_student_devices    StudentDevice[]          @relation("StudentDeviceCreatedBy")
  updated_student_devices    StudentDevice[]          @relation("StudentDeviceUpdatedBy")
  deleted_student_devices    StudentDevice[]          @relation("StudentDeviceDeletedBy")

  // Academic institution relations
  created_programs           Program[]                @relation("ProgramCreatedBy")
  updated_programs           Program[]                @relation("ProgramUpdatedBy")
  deleted_programs           Program[]                @relation("ProgramDeletedBy")
  created_specializations    Specialization[]         @relation("SpecializationCreatedBy")
  updated_specializations    Specialization[]         @relation("SpecializationUpdatedBy")
  deleted_specializations    Specialization[]         @relation("SpecializationDeletedBy")
  created_institutes         Institute[]              @relation("InstituteCreatedBy") 
  updated_institutes         Institute[]              @relation("InstituteUpdatedBy")
  deleted_institutes         Institute[]              @relation("InstituteDeletedBy")
  created_student_institutes StudentInstitute[]       @relation("StudentInstituteCreatedBy")
  updated_student_institutes StudentInstitute[]       @relation("StudentInstituteUpdatedBy")
  deleted_student_institutes StudentInstitute[]       @relation("StudentInstituteDeletedBy")

  // Course-related relations
  created_courses           Course[]                 @relation("CourseCreatedBy")
  updated_courses           Course[]                 @relation("CourseUpdatedBy")
  deleted_courses           Course[]                 @relation("CourseDeletedBy")
  created_modules           CourseModule[]           @relation("CourseModuleCreatedBy") 
  updated_modules           CourseModule[]           @relation("CourseModuleUpdatedBy")
  deleted_modules           CourseModule[]           @relation("CourseModuleDeletedBy")
  created_topics            CourseTopic[]            @relation("CourseTopicCreatedBy")
  updated_topics            CourseTopic[]            @relation("CourseTopicUpdatedBy")
  deleted_topics            CourseTopic[]            @relation("CourseTopicDeletedBy")
  created_videos            CourseVideo[]            @relation("CourseVideoCreatedBy")
  updated_videos            CourseVideo[]            @relation("CourseVideoUpdatedBy")
  deleted_videos            CourseVideo[]            @relation("CourseVideoDeletedBy")
  created_documents         CourseDocument[]         @relation("CourseDocumentCreatedBy")
  updated_documents         CourseDocument[]         @relation("CourseDocumentUpdatedBy")
  deleted_documents         CourseDocument[]         @relation("CourseDocumentDeletedBy")

  // Enrollment and session related relationships
  changed_enrollment_statuses     Enrollment[]            @relation("EnrollmentStatusChangedBy")
  created_enrollments             Enrollment[]            @relation("EnrollmentCreatedBy")
  updated_enrollments             Enrollment[]            @relation("EnrollmentUpdatedBy")
  deleted_enrollments             Enrollment[]            @relation("EnrollmentDeletedBy")
  changed_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryChangedBy")
  created_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryCreatedBy")
  updated_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryUpdatedBy")
  deleted_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryDeletedBy")
  created_student_progresses      StudentCourseProgress[]  @relation("StudentCourseProgressCreatedBy")
  updated_student_progresses      StudentCourseProgress[]  @relation("StudentCourseProgressUpdatedBy")
  deleted_student_progresses      StudentCourseProgress[]  @relation("StudentCourseProgressDeletedBy")
  created_teacher_courses         TeacherCourse[]          @relation("TeacherCourseCreatedBy")
  updated_teacher_courses         TeacherCourse[]          @relation("TeacherCourseUpdatedBy") 
  deleted_teacher_courses         TeacherCourse[]          @relation("TeacherCourseDeletedBy")
  
  // Course session related relations
  created_course_sessions   CourseSession[]             @relation("CourseSessionCreatedBy")
  updated_course_sessions   CourseSession[]             @relation("CourseSessionUpdatedBy")
  deleted_course_sessions   CourseSession[]             @relation("CourseSessionDeletedBy")
  created_cs_enrollments    CourseSessionEnrollment[]   @relation("CourseSessionEnrollmentCreatedBy")
  updated_cs_enrollments    CourseSessionEnrollment[]   @relation("CourseSessionEnrollmentUpdatedBy")
  deleted_cs_enrollments    CourseSessionEnrollment[]   @relation("CourseSessionEnrollmentDeletedBy")
  created_cs_settings       CourseSessionSettings[]     @relation("CourseSessionSettingsCreatedBy")
  updated_cs_settings       CourseSessionSettings[]     @relation("CourseSessionSettingsUpdatedBy")
  deleted_cs_settings       CourseSessionSettings[]     @relation("CourseSessionSettingsDeletedBy")
  
  // Video progress relations
  created_video_progresses  VideoProgress[]             @relation("VideoProgressCreatedBy")
  updated_video_progresses  VideoProgress[]             @relation("VideoProgressUpdatedBy")
  deleted_video_progresses  VideoProgress[]             @relation("VideoProgressDeletedBy")
  
  
  // Specialization program relations
  created_specialization_program SpecializationProgram[] @relation("SpecializationProgramCreatedBy")
  updated_specialization_program SpecializationProgram[] @relation("SpecializationProgramUpdatedBy")
  deleted_specialization_program SpecializationProgram[] @relation("SpecializationProgramDeletedBy")


  // Specialization program relations
  created_course_specialization CourseSpecialization[] @relation("CourseSpecializationCreatedBy")
  updated_course_specialization CourseSpecialization[] @relation("CourseSpecializationUpdatedBy")
  deleted_course_specialization CourseSpecialization[] @relation("CourseSpecializationDeletedBy")

  @@map("system_users")
}

// UserScreen model - individual user-specific screen permissions
model UserScreen {
  user_screen_id    Int               @id @default(autoincrement())
  tenant_id         Int
  system_user_id    Int
  screen_id         Int
  can_view          Boolean           @default(false)
  can_create        Boolean           @default(false)
  can_edit          Boolean           @default(false)
  can_delete        Boolean           @default(false)
  can_export        Boolean           @default(false)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  tenant            Tenant            @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  system_user       SystemUser        @relation(fields: [system_user_id], references: [system_user_id], onDelete: Cascade)
  screen            Screen            @relation(fields: [screen_id], references: [screen_id], onDelete: Cascade)
  created_by_user   SystemUser        @relation("UserScreenCreatedBy", fields: [created_by], references: [system_user_id])
  updated_by_user   SystemUser?       @relation("UserScreenUpdatedBy", fields: [updated_by], references: [system_user_id])
  deleted_by_user   SystemUser?       @relation("UserScreenDeletedBy", fields: [deleted_by], references: [system_user_id])

  @@map("user_screens")
}

// RoleScreen model - role-based default permissions for screens
model RoleScreen {
  role_screen_id    Int               @id @default(autoincrement())
  tenant_id         Int
  role_type         UserType
  screen_id         Int
  can_view          Boolean           @default(false)
  can_create        Boolean           @default(false)
  can_edit          Boolean           @default(false)
  can_delete        Boolean           @default(false)
  can_export        Boolean           @default(false)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  tenant            Tenant            @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  role              Role              @relation("RoleScreenRole", fields: [role_type], references: [role_type], onDelete: Cascade)
  screen            Screen            @relation(fields: [screen_id], references: [screen_id], onDelete: Cascade)
  created_by_user   SystemUser        @relation("RoleScreenCreatedBy", fields: [created_by], references: [system_user_id])
  updated_by_user   SystemUser?       @relation("RoleScreenUpdatedBy", fields: [updated_by], references: [system_user_id])
  deleted_by_user   SystemUser?       @relation("RoleScreenDeletedBy", fields: [deleted_by], references: [system_user_id])

  @@map("role_screens")
}