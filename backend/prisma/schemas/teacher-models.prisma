// Teacher profile and related entities (contact info)

model Teacher {
  teacher_id              Int                    @id @default(autoincrement())
  tenant_id               Int
  full_name               String                 @db.VarChar(255)
  first_name              String                 @db.VarChar(100)
  middle_name             String?                @db.VarChar(100)
  last_name               String                 @db.VarChar(100)
  country_id              Int?
  state_id                Int?
  city_id                 Int?
  address                 String?                @db.Text
  date_of_birth           DateTime?
  profile_picture_url     String?                @db.VarChar(500)
  zip_code                String?                @db.VarChar(20)
  age                     Int?
  gender                  Int?                   // 1: MALE, 2: FEMALE
  username                String                 @db.VarChar(50)
  password_hash           String                 @db.VarChar(255)
  last_login_at           DateTime?
  joining_date            DateTime?
  
  // Audit fields
  is_active               Boolean                @default(true)
  is_deleted              Boolean                @default(false)
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by_id           Int?
  created_ip              String?                @db.VarChar(45)
  updated_ip              String?                @db.VarChar(45)

  // Relationships
  tenant                  Tenant                 @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  country                 Country?               @relation(fields: [country_id], references: [country_id], onDelete: SetNull)
  state                   State?                 @relation(fields: [state_id], references: [state_id], onDelete: SetNull)
  city                    City?                  @relation(fields: [city_id], references: [city_id], onDelete: SetNull)
  emails                  TeacherEmailAddress[]
  phones                  TeacherPhoneNumber[]
  enrollments             Enrollment[]
  teacher_courses         TeacherCourse[]
  course_sessions         CourseSession[]
  course_announcements    CourseSessionAnnouncement[]
  assignments             Assignment[]
  assignment_mappings     AssignmentMapping[]
  quizzes                 Quiz[]
  quiz_mappings           QuizMapping[]
  quiz_questions          QuizQuestion[]
  quiz_attempt_answers    QuizAttemptAnswer[]    @relation("QuizAttemptAnswerReviewedByTeacher")
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TeacherCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TeacherUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TeacherDeletedBy", fields: [deleted_by_id], references: [system_user_id], onDelete: SetNull)

  @@map("teachers")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model TeacherEmailAddress {
  teacher_email_address_id Int      @id @default(autoincrement())
  tenant_id                Int
  teacher_id               Int
  email_address            String   @db.VarChar(255)
  is_primary               Boolean  @default(false)
  priority                 Int?
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by_id            Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  teacher                  Teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TeacherEmailAddressCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TeacherEmailAddressUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TeacherEmailAddressDeletedBy", fields: [deleted_by_id], references: [system_user_id], onDelete: SetNull)

  @@map("teacher_email_addresses")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model TeacherPhoneNumber {
  teacher_phone_number_id  Int      @id @default(autoincrement())
  tenant_id                Int
  teacher_id               Int
  dial_code                String   @db.VarChar(10)
  phone_number             String   @db.VarChar(20)
  iso_country_code         String?  @db.VarChar(3)
  is_primary               Boolean  @default(false)
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by_id            Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  teacher                  Teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TeacherPhoneNumberCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TeacherPhoneNumberUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TeacherPhoneNumberDeletedBy", fields: [deleted_by_id], references: [system_user_id], onDelete: SetNull)

  @@map("teacher_phone_numbers")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}
