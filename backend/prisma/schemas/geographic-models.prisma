// Geographic model - reference data for countries, states, and cities

// Country model - Top-level geographic entity with ISO codes
model Country {
  country_id              Int       @id @default(autoincrement())
  name                    String    @db.VarChar(100)
  iso_code_2              String?   @db.VarChar(2)
  iso_code_3              String?   @db.VarChar(3)
  dial_code               String?   @db.VarChar(10)
  
  // Minimal audit fields
  is_active               Boolean   @default(true)
  is_deleted              Boolean   @default(false)
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?   @db.VarChar(45)
  updated_ip              String?   @db.VarChar(45)

  // Relationships
  states                  State[]
  students                Student[]
  teachers                Teacher[]
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser       @relation("CountryCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?      @relation("CountryUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?      @relation("CountryDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("countries")
}

// State model - Administrative divisions within countries
model State {
  state_id                Int       @id @default(autoincrement())
  country_id              Int
  name                    String    @db.VarChar(100)
  state_code              String?   @db.VarChar(10)
  
  // Minimal audit fields
  is_active               Boolean   @default(true)
  is_deleted              Boolean   @default(false)
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?   @db.VarChar(45)
  updated_ip              String?   @db.VarChar(45)

  // Relationships
  country                 Country   @relation(fields: [country_id], references: [country_id], onDelete: Restrict)
  cities                  City[]
  students                Student[]
  teachers                Teacher[]
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser       @relation("StateCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?      @relation("StateUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?      @relation("StateDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("states")
}

// City model - Urban areas within states
model City {
  city_id                 Int       @id @default(autoincrement())
  state_id                Int
  name                    String    @db.VarChar(100)
  
  // Minimal audit fields
  is_active               Boolean   @default(true)
  is_deleted              Boolean   @default(false)
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?   @db.VarChar(45)
  updated_ip              String?   @db.VarChar(45)

  // Relationships
  state                   State     @relation(fields: [state_id], references: [state_id], onDelete: Restrict)
  students                Student[]
  teachers                Teacher[]
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser       @relation("CityCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?      @relation("CityUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?      @relation("CityDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("cities")
}
