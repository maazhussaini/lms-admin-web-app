// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Auto-generated file - DO NOT EDIT DIRECTLY

// Database connection configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// ============================================================================
// COMBINED SCHEMA CONTENT BELOW
// ============================================================================


// ============================================================================
// _enums.prisma
// ============================================================================

// System enumerations for the LMS platform

/**
 * Analytics and Reporting Enums
 * @description Defines enums for analytics reports, metrics, time granularity, widgets, and formats
 */

/**
 * Enum for report types
 */
enum ReportType {
  COURSE_PERFORMANCE @map("COURSE_PERFORMANCE")
  USER_ENGAGEMENT @map("USER_ENGAGEMENT")
  SYSTEM_USAGE @map("SYSTEM_USAGE")
  ASSESSMENT_SUMMARY @map("ASSESSMENT_SUMMARY")
  VIDEO_ANALYTICS @map("VIDEO_ANALYTICS")
  CUSTOM @map("CUSTOM")
}

/**
 * Enum for report status
 */
enum ReportStatus {
  DRAFT @map("DRAFT")
  SCHEDULED @map("SCHEDULED")
  GENERATING @map("GENERATING")
  COMPLETED @map("COMPLETED")
  FAILED @map("FAILED")
  CANCELLED @map("CANCELLED")
}

/**
 * Enum for metric types
 */
enum MetricType {
  COUNT @map("COUNT")
  PERCENTAGE @map("PERCENTAGE")
  AVERAGE @map("AVERAGE")
  SUM @map("SUM")
  RATIO @map("RATIO")
  TREND @map("TREND")
}

/**
 * Enum for time granularity
 */
enum TimeGranularity {
  HOURLY @map("HOURLY")
  DAILY @map("DAILY")
  WEEKLY @map("WEEKLY")
  MONTHLY @map("MONTHLY")
  QUARTERLY @map("QUARTERLY")
  YEARLY @map("YEARLY")
}

/**
 * Enum for widget types
 */
enum WidgetType {
  CHART @map("CHART")
  TABLE @map("TABLE")
  METRIC_CARD @map("METRIC_CARD")
  PROGRESS_BAR @map("PROGRESS_BAR")
  MAP @map("MAP")
  TIMELINE @map("TIMELINE")
}

/**
 * Enum for formats
 */
enum ExportFormat {
  PDF @map("PDF")
  EXCEL @map("EXCEL")
  CSV @map("CSV")
  JSON @map("JSON")
}

/**
 * Assignment Management Enums
 * @description Defines enums for assignment types, statuses, submissions, uploads, and reference mappings
 */

/**
 * Assignment type enumeration
 * @description Types of assignments available
 */
enum AssignmentType {
  FILE_UPLOAD @map("FILE_UPLOA")
}

/**
 * Assignment status enumeration
 * @description Defines the lifecycle status of an assignment
 */
enum AssignmentStatus {
  DRAFT @map("DRAFT")
  PUBLISHED @map("PUBLISHED")
  GRADING_IN_PROGRESS @map("GRADING_IN_PROGRESS")
  GRADED @map("GRADED")
  ARCHIVED @map("ARCHIVED")
}

/**
 * Submission status enumeration
 * @description Status of a student's assignment submission
 */
enum SubmissionStatus {
  PENDING @map("PENDING")
  NOT_SUBMITTED @map("NOT_SUBMITTED")
  SUBMITTED @map("SUBMITTED")
  LATE_SUBMISSION @map("LATE_SUBMISSION")
  GRADED @map("GRADED")
  RESUBMITTED @map("RESUBMITTED")
}

/**
 * Upload status enumeration
 * @description Status of file upload for assignment submissions
 */
enum UploadStatus {
  PENDING @map("PENDING")
  UPLOADING @map("UPLOADING")
  COMPLETED @map("COMPLETED")
  FAILED @map("FAILED")
  CANCELLED @map("CANCELLED")
}

/**
 * Reference table enumeration for assignment mappings
 * @description Entities that can have assignments mapped to them
 */
enum AssignmentReferenceTable {
  COURSE @map("COURSE")
  COURSE_MODULE @map("COURSE_MODULE")
  COURSE_TOPIC @map("COURSE_TOPIC")
}

/**
 * Bunny.net Video Management Enums
 * @description Defines enums for video processing, quality settings, DRM providers, webhooks, CDN regions, and encoding presets
 */

/**
 * Bunny.net video processing and upload status
 */
enum BunnyVideoStatus {
  UPLOADING @map("UPLOADING")
  PROCESSING @map("PROCESSING")
  FINISHED @map("FINISHED")
  FAILED @map("FAILED")
  CANCELLED @map("CANCELLED")
}

/**
 * Bunny.net video quality/resolution options
 */
enum BunnyVideoQuality {
  AUTO @map("AUTO")
  P240 @map("P240")
  P360 @map("P360")
  P480 @map("P480")
  P720 @map("P720")
  P1080 @map("P1080")
  P1440 @map("P1440")
  P2160 @map("P2160")
}

/**
 * DRM provider types supported by Bunny.net
 */
enum BunnyDrmProvider {
  WIDEVINE @map("WIDEVINE")
  PLAYREADY @map("PLAYREADY")
  FAIRPLAY @map("FAIRPLAY")
}

/**
 * Bunny.net webhook event types
 */
enum BunnyWebhookEvent {
  VIDEO_UPLOADED @map("VIDEO_UPLOADED")
  VIDEO_ENCODED @map("VIDEO_ENCODED")
  VIDEO_FAILED @map("VIDEO_FAILED")
  VIDEO_DELETED @map("VIDEO_DELETED")
  PURGE_COMPLETED @map("PURGE_COMPLETED")
}

/**
 * Bunny.net CDN regions/zones
 */
enum BunnyCdnRegion {
  GLOBAL @map("GLOBAL")
  US_EAST @map("US_EAST")
  US_WEST @map("US_WEST")
  EUROPE @map("EUROPE")
  ASIA @map("ASIA")
  OCEANIA @map("OCEANIA")
}

/**
 * Video encoding preset options
 */
enum BunnyEncodingPreset {
  FAST @map("FAST")
  BALANCED @map("BALANCED")
  QUALITY @map("QUALITY")
  CUSTOM @map("CUSTOM")
}

/**
 * Course Session Enums
 * @description Defines enums for course sessions, and session enrollment statuses
 */

/**
 * Course session status enumeration
 * @description Defines the lifecycle status of a course session
 */
enum CourseSessionStatus {
  DRAFT @map("DRAFT")
  PUBLISHED @map("PUBLISHED")
  EXPIRED @map("EXPIRED")
}

/**
 * Session enrollment status enumeration
 * @description Defines the enrollment status for course session enrollments
 */
enum SessionEnrollmentStatus {
  PENDING @map("PENDING")
  ENROLLED @map("ENROLLED")
  DROPPED @map("DROPPED")
  COMPLETED @map("COMPLETED")
  EXPELLED @map("EXPELLED")
}

/**
 * Video and Course Management Enums
 * @description Defines enums for video upload lifecycle and course status management
 */

/**
 * Video upload status enumeration
 * @description Represents the lifecycle of a video upload
 */
enum VideoUploadStatus {
  PENDING @map("PENDING")
  PROCESSING @map("PROCESSING")
  COMPLETED @map("COMPLETED")
  FAILED @map("FAILED")
  CANCELLED @map("CANCELLED")
}

/**
 * Course status enumeration
 * @description Represents the lifecycle status of a course
 */
enum CourseStatus {
  DRAFT @map("DRAFT")
  PUBLISHED @map("PUBLISHED")
  ARCHIVED @map("ARCHIVED")
  SUSPENDED @map("SUSPENDED")
}

enum CourseType {
  FREE @map("FREE")
  PAID @map("PAID")
}

/**
 * Notification and Communication Enums
 * @description Defines enums for notification types, priorities, delivery status, channels, templates, recipients, and email status
 */

/**
 * Notification type enumeration
 * @description Types of notifications available in the system
 */
enum NotificationType {
  ANNOUNCEMENT @map("ANNOUNCEMENT")
  ASSIGNMENT_DUE @map("ASSIGNMENT_DUE")
  QUIZ_AVAILABLE @map("QUIZ_AVAILABLE")
  GRADE_POSTED @map("GRADE_POSTED")
  COURSE_UPDATE @map("COURSE_UPDATE")
  SYSTEM_ALERT @map("SYSTEM_ALERT")
  ENROLLMENT_CONFIRMATION @map("ENROLLMENT_CONFIRMATION")
  DEADLINE_REMINDER @map("DEADLINE_REMINDER")
}

/**
 * Notification priority enumeration
 * @description Priority levels for notifications
 */
enum NotificationPriority {
  LOW @map("LOW")
  NORMAL @map("NORMAL")
  HIGH @map("HIGH")
  URGENT @map("URGENT")
}

/**
 * Delivery status enumeration
 * @description Status of notification delivery
 */
enum DeliveryStatus {
  PENDING @map("PENDING")
  DELIVERED @map("DELIVERED")
  FAILED @map("FAILED")
  READ @map("READ")
  DISMISSED @map("DISMISSED")
}

/**
 * Delivery channel enumeration
 * @description Available delivery channels for notifications
 */
enum DeliveryChannel {
  IN_APP @map("IN_APP")
  EMAIL @map("EMAIL")
  PUSH @map("PUSH")
  SMS @map("SMS")
}

/**
 * Template type enumeration
 * @description Types of notification templates
 */
enum TemplateType {
  EMAIL_HTML @map("EMAIL_HTML")
  EMAIL_TEXT @map("EMAIL_TEXT")
  PUSH @map("PUSH")
  IN_APP @map("IN_APP")
}

/**
 * Recipient type enumeration
 * @description Types of notification recipients
 */
enum RecipientType {
  STUDENT @map("STUDENT")
  TEACHER @map("TEACHER")
  SYSTEM_USER @map("SYSTEM_USER")
  ALL_STUDENTS @map("ALL_STUDENTS")
  ALL_TEACHERS @map("ALL_TEACHERS")
  COURSE_ENROLLMENTS @map("COURSE_ENROLLMENTS")
}

/**
 * Email send status enumeration
 * @description Status of email sending attempts
 */
enum EmailSendStatus {
  PENDING @map("PENDING")
  SENT @map("SENT")
  FAILED @map("FAILED")
  BOUNCED @map("BOUNCED")
  DELIVERED @map("DELIVERED")
}

/**
 * Quiz and Assessment Enums
 * @description Defines enums for quiz status, question types, attempt status, and reference mappings
 */

/**
 * Quiz status enumeration
 * @description Defines the lifecycle status of a quiz
 */
enum QuizStatus {
  DRAFT @map("DRAFT")
  PUBLISHED @map("PUBLISHED")
  GRADING_IN_PROGRESS @map("GRADING_IN_PROGRESS")
  GRADED @map("GRADED")
  ARCHIVED @map("ARCHIVED")
}

/**
 * Quiz question type enumeration
 * @description Types of quiz questions available
 */
enum QuizQuestionType {
  MULTIPLE_CHOICE_SINGLE_ANSWER @map("MULTIPLE_CHOICE_SINGLE_ANSWER")
  MULTIPLE_CHOICE_MULTIPLE_ANSWERS @map("MULTIPLE_CHOICE_MULTIPLE_ANSWERS")
  TRUE_FALSE @map("TRUE_FALSE")
  SHORT_ANSWER_ESSAY @map("SHORT_ANSWER_ESSAY")
}

/**
 * Quiz attempt status enumeration
 * @description Status of a student's quiz attempt
 */
enum QuizAttemptStatus {
  NOT_STARTED @map("NOT_STARTED")
  IN_PROGRESS @map("IN_PROGRESS")
  SUBMITTED @map("SUBMITTED")
  GRADED @map("GRADED")
}

/**
 * Reference table enumeration for quiz mappings
 * @description Entities that can have quizzes mapped to them
 */
enum QuizReferenceTable {
  COURSE @map("COURSE")
  COURSE_MODULE @map("COURSE_MODULE")
  COURSE_TOPIC @map("COURSE_TOPIC")
}

/**
 * Student and User Management Enums
 * @description Defines enums for gender, student status, device types, and enrollment status
 */

/**
 * Gender enumeration
 * @description Represents the gender of a student
 */
enum Gender {
  MALE @map("MALE")
  FEMALE @map("FEMALE")
}

/**
 * Student status enumeration
 * @description Represents the lifecycle status of a student
 */
enum StudentStatus {
  ACTIVE @map("ACTIVE")
  ALUMNI @map("ALUMNI")
  DROPOUT @map("DROPOUT")
  ACCOUNT_FREEZED @map("ACCOUNT_FREEZED")
  BLACKLISTED @map("BLACKLISTED")
  SUSPENDED @map("SUSPENDED")
  DEACTIVATED @map("DEACTIVATED")
}

/**
 * Device type enumeration
 * @description Represents the type of device used by a student
 */
enum DeviceType {
  IOS @map("IOS")
  ANDROID @map("ANDROID")
  WEB @map("WEB")
  DESKTOP @map("DESKTOP")
}

/**
 * Enrollment status enumeration
 * @description Represents the lifecycle status of a student's enrollment in a course
 */
enum EnrollmentStatus {
  PENDING @map("PENDING")
  ACTIVE @map("ACTIVE")
  COMPLETED @map("COMPLETED")
  DROPPED @map("DROPPED")
  SUSPENDED @map("SUSPENDED")
  EXPELLED @map("EXPELLED")
  TRANSFERRED @map("TRANSFERRED")
  DEFERRED @map("DEFERRED")
}

/**
 * System Administration Enums
 * @description Defines enums for system user roles and operational status management
 */

/**
 * System user role enumeration
 * @description Defines system-level roles with proper hierarchy
 */
enum SystemUserRole {
  SUPER_ADMIN @map("SUPER_ADMIN")
  TENANT_ADMIN @map("TENANT_ADMIN")
}

/**
 * System user status enumeration
 * @description Operational status of system users
 */
enum SystemUserStatus {
  ACTIVE @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  SUSPENDED @map("SUSPENDED")
  LOCKED @map("LOCKED")
}

/**
 * Tenant and Client Management Enums
 * @description Defines enums for tenant status, client status, and contact type categorization
 */

/**
 * Tenant status enumeration
 * @description Defines the operational status of a tenant in the system
 */
enum TenantStatus {
  ACTIVE @map("ACTIVE")
  SUSPENDED @map("SUSPENDED")
  TRIAL @map("TRIAL")
  EXPIRED @map("EXPIRED")
  CANCELLED @map("CANCELLED")
}

/**
 * Client status enumeration
 * @description Defines the operational status of a client
 */
enum ClientStatus {
  ACTIVE @map("ACTIVE")
  INACTIVE @map("INACTIVE")
  SUSPENDED @map("SUSPENDED")
  TERMINATED @map("TERMINATED")
}

/**
 * Contact type enumeration
 * @description Categorizes different types of contact information
 */
enum ContactType {
  PRIMARY @map("PRIMARY")
  SECONDARY @map("SECONDARY")
  EMERGENCY @map("EMERGENCY")
  BILLING @map("BILLING")
}

/**
 * User Type Enums
 * @description Defines user types for authentication and authorization purposes
 *
 */

/**
 * User type enumeration for authentication
 * @description Distinguishes between different categories of users in the system
 */
enum UserType {
  STUDENT @map("STUDENT")
  TEACHER @map("TEACHER")
  TENANT_ADMIN @map("TENANT_ADMIN")
  SUPER_ADMIN @map("SUPER_ADMIN")
}

// ============================================================================
// tenant-models.prisma
// ============================================================================

// Tenant model - core entity for multi-tenant isolation
model Tenant {
  tenant_id      Int     @id @default(autoincrement())
  tenant_name    String  @unique(map: "uq_tenants_tenant_name") @db.VarChar(100)
  logo_url_light String? @db.VarChar(500)
  logo_url_dark  String? @db.VarChar(500)
  favicon_url    String? @db.VarChar(500)
  theme          Json?
  tenant_status  TenantStatus @default(ACTIVE)

  // Audit fields
  is_active     Boolean   @default(true)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    Int
  updated_by    Int?
  deleted_at    DateTime?
  deleted_by    Int?
  created_ip    String?   @db.VarChar(45)
  updated_ip    String?   @db.VarChar(45)

  // Core relationships
  clients                Client[]
  tenant_phone_numbers   TenantPhoneNumber[]
  tenant_email_addresses TenantEmailAddress[]
  client_tenants         ClientTenant[]
  system_users           SystemUser[]
  user_screens           UserScreen[]
  role_screens           RoleScreen[]
  
  // Notification relationships
  notifications                  Notification[]
  course_session_announcements   CourseSessionAnnouncement[]
  notification_deliveries        NotificationDelivery[]
  email_queues                   EmailQueue[]
  notification_templates         NotificationTemplate[]
  push_notification_devices      PushNotificationDevice[]

  // User relationships
  teachers                       Teacher[]
  teacher_email_addresses        TeacherEmailAddress[]
  teacher_phone_numbers          TeacherPhoneNumber[]
  students                       Student[]
  student_email_addresses        StudentEmailAddress[]
  student_phone_numbers          StudentPhoneNumber[]
  student_devices                StudentDevice[]
  
  // Academic relationships
  programs                       Program[]
  specializations                Specialization[]
  institutes                     Institute[]
  student_institutes             StudentInstitute[]
  
  // Course relationships
  courses                        Course[]
  course_modules                 CourseModule[]
  course_topics                  CourseTopic[]
  course_videos                  CourseVideo[]
  course_documents               CourseDocument[]
  
  // Session & enrollment relationships
  enrollments                    Enrollment[]
  enrollment_status_histories    EnrollmentStatusHistory[]
  student_course_progresses      StudentCourseProgress[]
  teacher_courses                TeacherCourse[]
  course_sessions                CourseSession[]
  course_session_enrollments     CourseSessionEnrollment[]
  course_session_settings        CourseSessionSettings[]
  video_progresses               VideoProgress[]
  
  // Assessment relationships
  assignments                    Assignment[]
  assignment_mappings            AssignmentMapping[]
  student_assignments            StudentAssignment[]
  assignment_submission_files    AssignmentSubmissionFile[]
  quizzes                        Quiz[]
  quiz_mappings                  QuizMapping[]
  quiz_questions                 QuizQuestion[]
  quiz_question_options          QuizQuestionOption[]
  quiz_question_answers          QuizQuestionAnswer[]
  quiz_attempts                  QuizAttempt[]
  quiz_attempt_answers           QuizAttemptAnswer[]

  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TenantCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TenantUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TenantDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("tenants")
}

// Client model - represents organizations or individuals within tenants
model Client {
  client_id     Int          @id @default(autoincrement())
  full_name     String       @db.VarChar(255)
  email_address String       @db.VarChar(255)
  dial_code     String?      @db.VarChar(20)
  phone_number  String?      @db.VarChar(20)
  address       String?      @db.VarChar(500)
  client_status ClientStatus @default(ACTIVE)

  // Multi-tenant audit fields
  tenant_id     Int
  is_active     Boolean   @default(true)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    Int
  updated_by    Int?
  deleted_at    DateTime?
  deleted_by    Int?
  created_ip    String?   @db.VarChar(45)
  updated_ip    String?   @db.VarChar(45)

  // Relations
  tenant         Tenant         @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  client_tenants ClientTenant[]
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("ClientCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("ClientUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("ClientDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("clients")
}

// Tenant Phone Number model - contact phone numbers for tenants
model TenantPhoneNumber {
  tenant_phone_number_id Int     @id @default(autoincrement())
  tenant_id              Int
  dial_code              String  @db.VarChar(20)
  phone_number           String  @db.VarChar(20)
  iso_country_code       String? @db.Char(2)
  is_primary             Boolean @default(false)
  contact_type           ContactType

  // Audit fields
  is_active     Boolean   @default(true)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    Int
  updated_by    Int?
  deleted_at    DateTime?
  deleted_by    Int?
  created_ip    String?   @db.VarChar(45)
  updated_ip    String?   @db.VarChar(45)

  // Relations
  tenant Tenant @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TenantPhoneNumberCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TenantPhoneNumberUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TenantPhoneNumberDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("tenant_phone_numbers")
}

// Tenant Email Address model - contact email addresses for tenants
model TenantEmailAddress {
  tenant_email_address_id Int     @id @default(autoincrement())
  tenant_id               Int
  email_address           String  @db.VarChar(255)
  is_primary              Boolean @default(false)
  contact_type            ContactType

  // Audit fields
  is_active     Boolean   @default(true)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    Int
  updated_by    Int?
  deleted_at    DateTime?
  deleted_by    Int?
  created_ip    String?   @db.VarChar(45)
  updated_ip    String?   @db.VarChar(45)

  // Relations
  tenant Tenant @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TenantEmailAddressCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TenantEmailAddressUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TenantEmailAddressDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("tenant_email_addresses")
}

// Client-Tenant association model - many-to-many relationship
model ClientTenant {
  client_tenant_id Int @id @default(autoincrement())
  client_id        Int
  tenant_id        Int

  // Audit fields
  is_active     Boolean   @default(true)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    Int
  updated_by    Int?
  deleted_at    DateTime?
  deleted_by    Int?
  created_ip    String?   @db.VarChar(45)
  updated_ip    String?   @db.VarChar(45)

  // Relations
  client Client @relation(fields: [client_id], references: [client_id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("ClientTenantCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("ClientTenantUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("ClientTenantDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("client_tenants")
}

// ============================================================================
// system-user-models.prisma
// ============================================================================

// Role model - defines system roles for access control
model Role {
  role_id           Int               @id @default(autoincrement())
  role_type         UserType          @unique
  role_name         String            @db.VarChar(100)
  role_description  String?           @db.Text
  is_system_role    Boolean           @default(false)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int?
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  system_users      SystemUser[]      @relation("UserRole")
  role_screens      RoleScreen[]      @relation("RoleScreenRole")
  created_by_user   SystemUser?       @relation("RoleCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("RoleUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("RoleDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("roles")
}

// Screen model - defines system screens/modules for permission management
model Screen {
  screen_id         Int               @id @default(autoincrement())
  screen_name       String            @db.VarChar(100)
  screen_description String?          @db.Text
  route_path        String?           @db.VarChar(255)
  parent_screen_id  Int?
  sort_order        Int?
  icon_class        String?           @db.VarChar(100)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  parent_screen     Screen?           @relation("ScreenHierarchy", fields: [parent_screen_id], references: [screen_id], onDelete: SetNull)
  child_screens     Screen[]          @relation("ScreenHierarchy")
  user_screens      UserScreen[]
  role_screens      RoleScreen[]
  created_by_user   SystemUser        @relation("ScreenCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("ScreenUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("ScreenDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("screens")
}

// SystemUser model - core user entity with conditional tenant isolation
model SystemUser {
  system_user_id    Int               @id @default(autoincrement())
  tenant_id         Int?              
  role_type         UserType
  username          String            @db.VarChar(50)
  full_name         String            @db.VarChar(255)
  email_address     String            @db.VarChar(255)
  password_hash     String            @db.VarChar(255)
  last_login_at     DateTime?
  login_attempts    Int?              @default(0)
  system_user_status SystemUserStatus @default(ACTIVE)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int?
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  tenant            Tenant?           @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  role              Role              @relation("UserRole", fields: [role_type], references: [role_type], onDelete: Restrict)
  user_screens      UserScreen[]

  // Self-references for audit trails
  created_by_me_users      SystemUser[]      @relation("UserCreatedBy")
  created_by_user          SystemUser?       @relation("UserCreatedBy", fields: [created_by], references: [system_user_id])
  updated_by_me_users      SystemUser[]      @relation("UserUpdatedBy")
  updated_by_user          SystemUser?       @relation("UserUpdatedBy", fields: [updated_by], references: [system_user_id])
  deleted_by_me_users      SystemUser[]      @relation("UserDeletedBy")
  deleted_by_user          SystemUser?       @relation("UserDeletedBy", fields: [deleted_by], references: [system_user_id])

  // Role audit relations
  created_roles            Role[]           @relation("RoleCreatedBy")
  updated_roles            Role[]           @relation("RoleUpdatedBy")
  deleted_roles            Role[]           @relation("RoleDeletedBy")

  // Screen audit relations
  created_screens          Screen[]         @relation("ScreenCreatedBy")
  updated_screens          Screen[]         @relation("ScreenUpdatedBy")
  deleted_screens          Screen[]         @relation("ScreenDeletedBy")

  // UserScreen audit relations
  created_user_screens     UserScreen[]     @relation("UserScreenCreatedBy")
  updated_user_screens     UserScreen[]     @relation("UserScreenUpdatedBy")
  deleted_user_screens     UserScreen[]     @relation("UserScreenDeletedBy")

  // RoleScreen audit relations
  created_role_screens     RoleScreen[]     @relation("RoleScreenCreatedBy")
  updated_role_screens     RoleScreen[]     @relation("RoleScreenUpdatedBy")
  deleted_role_screens     RoleScreen[]     @relation("RoleScreenDeletedBy")

  // Tenant audit relations
  created_tenants            Tenant[]               @relation("TenantCreatedBy")
  updated_tenants            Tenant[]               @relation("TenantUpdatedBy")
  deleted_tenants            Tenant[]               @relation("TenantDeletedBy")
  
  // Client audit relations
  created_clients            Client[]               @relation("ClientCreatedBy")
  updated_clients            Client[]               @relation("ClientUpdatedBy")
  deleted_clients            Client[]               @relation("ClientDeletedBy")
  
  // TenantPhoneNumber audit relations
  created_tenant_phones      TenantPhoneNumber[]    @relation("TenantPhoneNumberCreatedBy")
  updated_tenant_phones      TenantPhoneNumber[]    @relation("TenantPhoneNumberUpdatedBy")
  deleted_tenant_phones      TenantPhoneNumber[]    @relation("TenantPhoneNumberDeletedBy")
  
  // TenantEmailAddress audit relations
  created_tenant_emails      TenantEmailAddress[]   @relation("TenantEmailAddressCreatedBy")
  updated_tenant_emails      TenantEmailAddress[]   @relation("TenantEmailAddressUpdatedBy")
  deleted_tenant_emails      TenantEmailAddress[]   @relation("TenantEmailAddressDeletedBy")
  
  // ClientTenant audit relations
  created_client_tenants     ClientTenant[]         @relation("ClientTenantCreatedBy")
  updated_client_tenants     ClientTenant[]         @relation("ClientTenantUpdatedBy")
  deleted_client_tenants     ClientTenant[]         @relation("ClientTenantDeletedBy")

  // Country audit relations
  created_countries        Country[]         @relation("CountryCreatedBy")
  updated_countries        Country[]         @relation("CountryUpdatedBy")
  deleted_countries        Country[]         @relation("CountryDeletedBy")

  // State audit relations
  created_states           State[]           @relation("StateCreatedBy")
  updated_states           State[]           @relation("StateUpdatedBy")
  deleted_states           State[]           @relation("StateDeletedBy")

  // City audit relations
  created_cities           City[]            @relation("CityCreatedBy")
  updated_cities           City[]            @relation("CityUpdatedBy")
  deleted_cities           City[]            @relation("CityDeletedBy")

  // Teacher-related relations
  created_teachers           Teacher[]                @relation("TeacherCreatedBy")
  updated_teachers           Teacher[]                @relation("TeacherUpdatedBy")
  deleted_teachers           Teacher[]                @relation("TeacherDeletedBy")
  created_teacher_emails     TeacherEmailAddress[]    @relation("TeacherEmailAddressCreatedBy")
  updated_teacher_emails     TeacherEmailAddress[]    @relation("TeacherEmailAddressUpdatedBy")
  deleted_teacher_emails     TeacherEmailAddress[]    @relation("TeacherEmailAddressDeletedBy")
  created_teacher_phones     TeacherPhoneNumber[]     @relation("TeacherPhoneNumberCreatedBy")
  updated_teacher_phones     TeacherPhoneNumber[]     @relation("TeacherPhoneNumberUpdatedBy")
  deleted_teacher_phones     TeacherPhoneNumber[]     @relation("TeacherPhoneNumberDeletedBy")

  // Student-related relations
  created_students           Student[]                @relation("StudentCreatedBy") 
  updated_students           Student[]                @relation("StudentUpdatedBy")
  deleted_students           Student[]                @relation("StudentDeletedBy")
  created_student_emails     StudentEmailAddress[]    @relation("StudentEmailAddressCreatedBy")
  updated_student_emails     StudentEmailAddress[]    @relation("StudentEmailAddressUpdatedBy")
  deleted_student_emails     StudentEmailAddress[]    @relation("StudentEmailAddressDeletedBy") 
  created_student_phones     StudentPhoneNumber[]     @relation("StudentPhoneNumberCreatedBy")
  updated_student_phones     StudentPhoneNumber[]     @relation("StudentPhoneNumberUpdatedBy")
  deleted_student_phones     StudentPhoneNumber[]     @relation("StudentPhoneNumberDeletedBy")
  created_student_devices    StudentDevice[]          @relation("StudentDeviceCreatedBy")
  updated_student_devices    StudentDevice[]          @relation("StudentDeviceUpdatedBy")
  deleted_student_devices    StudentDevice[]          @relation("StudentDeviceDeletedBy")

  // Academic institution relations
  created_programs           Program[]                @relation("ProgramCreatedBy")
  updated_programs           Program[]                @relation("ProgramUpdatedBy")
  deleted_programs           Program[]                @relation("ProgramDeletedBy")
  created_specializations    Specialization[]         @relation("SpecializationCreatedBy")
  updated_specializations    Specialization[]         @relation("SpecializationUpdatedBy")
  deleted_specializations    Specialization[]         @relation("SpecializationDeletedBy")
  created_institutes         Institute[]              @relation("InstituteCreatedBy") 
  updated_institutes         Institute[]              @relation("InstituteUpdatedBy")
  deleted_institutes         Institute[]              @relation("InstituteDeletedBy")
  created_student_institutes StudentInstitute[]       @relation("StudentInstituteCreatedBy")
  updated_student_institutes StudentInstitute[]       @relation("StudentInstituteUpdatedBy")
  deleted_student_institutes StudentInstitute[]       @relation("StudentInstituteDeletedBy")

  // Course-related relations
  created_courses           Course[]                 @relation("CourseCreatedBy")
  updated_courses           Course[]                 @relation("CourseUpdatedBy")
  deleted_courses           Course[]                 @relation("CourseDeletedBy")
  created_modules           CourseModule[]           @relation("CourseModuleCreatedBy") 
  updated_modules           CourseModule[]           @relation("CourseModuleUpdatedBy")
  deleted_modules           CourseModule[]           @relation("CourseModuleDeletedBy")
  created_topics            CourseTopic[]            @relation("CourseTopicCreatedBy")
  updated_topics            CourseTopic[]            @relation("CourseTopicUpdatedBy")
  deleted_topics            CourseTopic[]            @relation("CourseTopicDeletedBy")
  created_videos            CourseVideo[]            @relation("CourseVideoCreatedBy")
  updated_videos            CourseVideo[]            @relation("CourseVideoUpdatedBy")
  deleted_videos            CourseVideo[]            @relation("CourseVideoDeletedBy")
  created_documents         CourseDocument[]         @relation("CourseDocumentCreatedBy")
  updated_documents         CourseDocument[]         @relation("CourseDocumentUpdatedBy")
  deleted_documents         CourseDocument[]         @relation("CourseDocumentDeletedBy")

  // Enrollment and session related relationships
  changed_enrollment_statuses     Enrollment[]            @relation("EnrollmentStatusChangedBy")
  created_enrollments             Enrollment[]            @relation("EnrollmentCreatedBy")
  updated_enrollments             Enrollment[]            @relation("EnrollmentUpdatedBy")
  deleted_enrollments             Enrollment[]            @relation("EnrollmentDeletedBy")
  changed_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryChangedBy")
  created_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryCreatedBy")
  updated_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryUpdatedBy")
  deleted_enrollment_histories    EnrollmentStatusHistory[] @relation("EnrollmentStatusHistoryDeletedBy")
  created_student_progresses      StudentCourseProgress[]  @relation("StudentCourseProgressCreatedBy")
  updated_student_progresses      StudentCourseProgress[]  @relation("StudentCourseProgressUpdatedBy")
  deleted_student_progresses      StudentCourseProgress[]  @relation("StudentCourseProgressDeletedBy")
  created_teacher_courses         TeacherCourse[]          @relation("TeacherCourseCreatedBy")
  updated_teacher_courses         TeacherCourse[]          @relation("TeacherCourseUpdatedBy") 
  deleted_teacher_courses         TeacherCourse[]          @relation("TeacherCourseDeletedBy")
  
  // Course session related relations
  created_course_sessions   CourseSession[]             @relation("CourseSessionCreatedBy")
  updated_course_sessions   CourseSession[]             @relation("CourseSessionUpdatedBy")
  deleted_course_sessions   CourseSession[]             @relation("CourseSessionDeletedBy")
  created_cs_enrollments    CourseSessionEnrollment[]   @relation("CourseSessionEnrollmentCreatedBy")
  updated_cs_enrollments    CourseSessionEnrollment[]   @relation("CourseSessionEnrollmentUpdatedBy")
  deleted_cs_enrollments    CourseSessionEnrollment[]   @relation("CourseSessionEnrollmentDeletedBy")
  created_cs_settings       CourseSessionSettings[]     @relation("CourseSessionSettingsCreatedBy")
  updated_cs_settings       CourseSessionSettings[]     @relation("CourseSessionSettingsUpdatedBy")
  deleted_cs_settings       CourseSessionSettings[]     @relation("CourseSessionSettingsDeletedBy")
  
  // Video progress relations
  created_video_progresses  VideoProgress[]             @relation("VideoProgressCreatedBy")
  updated_video_progresses  VideoProgress[]             @relation("VideoProgressUpdatedBy")
  deleted_video_progresses  VideoProgress[]             @relation("VideoProgressDeletedBy")
  
  @@map("system_users")
}

// UserScreen model - individual user-specific screen permissions
model UserScreen {
  user_screen_id    Int               @id @default(autoincrement())
  tenant_id         Int
  system_user_id    Int
  screen_id         Int
  can_view          Boolean           @default(false)
  can_create        Boolean           @default(false)
  can_edit          Boolean           @default(false)
  can_delete        Boolean           @default(false)
  can_export        Boolean           @default(false)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  tenant            Tenant            @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  system_user       SystemUser        @relation(fields: [system_user_id], references: [system_user_id], onDelete: Cascade)
  screen            Screen            @relation(fields: [screen_id], references: [screen_id], onDelete: Cascade)
  created_by_user   SystemUser        @relation("UserScreenCreatedBy", fields: [created_by], references: [system_user_id])
  updated_by_user   SystemUser?       @relation("UserScreenUpdatedBy", fields: [updated_by], references: [system_user_id])
  deleted_by_user   SystemUser?       @relation("UserScreenDeletedBy", fields: [deleted_by], references: [system_user_id])

  @@map("user_screens")
}

// RoleScreen model - role-based default permissions for screens
model RoleScreen {
  role_screen_id    Int               @id @default(autoincrement())
  tenant_id         Int
  role_type         UserType
  screen_id         Int
  can_view          Boolean           @default(false)
  can_create        Boolean           @default(false)
  can_edit          Boolean           @default(false)
  can_delete        Boolean           @default(false)
  can_export        Boolean           @default(false)
  
  // Audit fields
  is_active         Boolean           @default(true)
  is_deleted        Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  created_by        Int
  updated_by        Int?
  deleted_at        DateTime?
  deleted_by        Int?
  created_ip        String?           @db.VarChar(45)
  updated_ip        String?           @db.VarChar(45)

  // Relationships
  tenant            Tenant            @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  role              Role              @relation("RoleScreenRole", fields: [role_type], references: [role_type], onDelete: Cascade)
  screen            Screen            @relation(fields: [screen_id], references: [screen_id], onDelete: Cascade)
  created_by_user   SystemUser        @relation("RoleScreenCreatedBy", fields: [created_by], references: [system_user_id])
  updated_by_user   SystemUser?       @relation("RoleScreenUpdatedBy", fields: [updated_by], references: [system_user_id])
  deleted_by_user   SystemUser?       @relation("RoleScreenDeletedBy", fields: [deleted_by], references: [system_user_id])

  @@map("role_screens")
}

// ============================================================================
// geographic-models.prisma
// ============================================================================

// Geographic model - reference data for countries, states, and cities

// Country model - Top-level geographic entity with ISO codes
model Country {
  country_id              Int       @id @default(autoincrement())
  name                    String    @db.VarChar(100)
  iso_code_2              String?   @db.VarChar(2)
  iso_code_3              String?   @db.VarChar(3)
  dial_code               String?   @db.VarChar(10)
  
  // Minimal audit fields
  is_active               Boolean   @default(true)
  is_deleted              Boolean   @default(false)
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?   @db.VarChar(45)
  updated_ip              String?   @db.VarChar(45)

  // Relationships
  states                  State[]
  students                Student[]
  teachers                Teacher[]
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser       @relation("CountryCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?      @relation("CountryUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?      @relation("CountryDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("countries")
}

// State model - Administrative divisions within countries
model State {
  state_id                Int       @id @default(autoincrement())
  country_id              Int
  name                    String    @db.VarChar(100)
  state_code              String?   @db.VarChar(10)
  
  // Minimal audit fields
  is_active               Boolean   @default(true)
  is_deleted              Boolean   @default(false)
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?   @db.VarChar(45)
  updated_ip              String?   @db.VarChar(45)

  // Relationships
  country                 Country   @relation(fields: [country_id], references: [country_id], onDelete: Restrict)
  cities                  City[]
  students                Student[]
  teachers                Teacher[]
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser       @relation("StateCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?      @relation("StateUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?      @relation("StateDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("states")
}

// City model - Urban areas within states
model City {
  city_id                 Int       @id @default(autoincrement())
  state_id                Int
  name                    String    @db.VarChar(100)
  
  // Minimal audit fields
  is_active               Boolean   @default(true)
  is_deleted              Boolean   @default(false)
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?   @db.VarChar(45)
  updated_ip              String?   @db.VarChar(45)

  // Relationships
  state                   State     @relation(fields: [state_id], references: [state_id], onDelete: Restrict)
  students                Student[]
  teachers                Teacher[]
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser       @relation("CityCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?      @relation("CityUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?      @relation("CityDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("cities")
}


// ============================================================================
// academic-institution-models.prisma
// ============================================================================

// Academic and Institutional models for LMS system

// Program model - top-level academic programs within a tenant
model Program {
  program_id           Int             @id @default(autoincrement())
  tenant_id            Int
  program_name         String          @db.VarChar(255)
  program_thumbnail_url String?        @db.Text
  
  // Audit fields
  is_active            Boolean         @default(true)
  is_deleted           Boolean         @default(false)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?         @db.VarChar(45)
  updated_ip           String?         @db.VarChar(45)

  // Relationships
  tenant               Tenant          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  specializations      Specialization[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser      @relation("ProgramCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?     @relation("ProgramUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?     @relation("ProgramDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("programs")
}

// Specialization model - academic specializations within programs
model Specialization {
  specialization_id     Int             @id @default(autoincrement())
  tenant_id             Int
  program_id            Int
  specialization_name   String          @db.VarChar(255)
  specialization_thumbnail_url String?        @db.Text
  
  // Audit fields
  is_active            Boolean         @default(true)
  is_deleted           Boolean         @default(false)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?         @db.VarChar(45)
  updated_ip           String?         @db.VarChar(45)

  // Relationships
  tenant               Tenant          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  program              Program         @relation(fields: [program_id], references: [program_id], onDelete: Cascade)
  courses              Course[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser      @relation("SpecializationCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?     @relation("SpecializationUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?     @relation("SpecializationDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("specializations")
}

// Institute model - educational institutions
model Institute {
  institute_id         Int             @id @default(autoincrement())
  tenant_id            Int
  institute_name       String          @db.VarChar(255)
  
  // Audit fields
  is_active            Boolean         @default(true)
  is_deleted           Boolean         @default(false)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?         @db.VarChar(45)
  updated_ip           String?         @db.VarChar(45)

  // Relationships
  tenant               Tenant          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student_institutes   StudentInstitute[]
  enrollments          Enrollment[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser      @relation("InstituteCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?     @relation("InstituteUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?     @relation("InstituteDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("institutes")
}

// StudentInstitute model - many-to-many relationship between students and institutes
model StudentInstitute {
  student_institute_id Int             @id @default(autoincrement())
  tenant_id            Int
  student_id           Int
  institute_id         Int
  
  // Audit fields
  is_active            Boolean         @default(true)
  is_deleted           Boolean         @default(false)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?         @db.VarChar(45)
  updated_ip           String?         @db.VarChar(45)

  // Relationships
  tenant               Tenant          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student              Student         @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  institute            Institute       @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser      @relation("StudentInstituteCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?     @relation("StudentInstituteUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?     @relation("StudentInstituteDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("student_institutes")
}


// ============================================================================
// teacher-models.prisma
// ============================================================================

// Teacher profile and related entities (contact info)

model Teacher {
  teacher_id              Int                    @id @default(autoincrement())
  tenant_id               Int
  full_name               String                 @db.VarChar(255)
  first_name              String                 @db.VarChar(100)
  middle_name             String?                @db.VarChar(100)
  last_name               String                 @db.VarChar(100)
  country_id              Int?
  state_id                Int?
  city_id                 Int?
  address                 String?                @db.Text
  teacher_qualification   String?                @db.Text
  date_of_birth           DateTime?
  profile_picture_url     String?                @db.VarChar(500)
  zip_code                String?                @db.VarChar(20)
  age                     Int?
  gender                  Gender?
  username                String                 @db.VarChar(50)
  password_hash           String                 @db.VarChar(255)
  last_login_at           DateTime?
  joining_date            DateTime?
  
  // Audit fields
  is_active               Boolean                @default(true)
  is_deleted              Boolean                @default(false)
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?                @db.VarChar(45)
  updated_ip              String?                @db.VarChar(45)

  // Relationships
  tenant                  Tenant                 @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  country                 Country?               @relation(fields: [country_id], references: [country_id], onDelete: SetNull)
  state                   State?                 @relation(fields: [state_id], references: [state_id], onDelete: SetNull)
  city                    City?                  @relation(fields: [city_id], references: [city_id], onDelete: SetNull)
  emails                  TeacherEmailAddress[]
  phones                  TeacherPhoneNumber[]
  enrollments             Enrollment[]
  teacher_courses         TeacherCourse[]
  course_sessions         CourseSession[]
  course_announcements    CourseSessionAnnouncement[]
  assignments             Assignment[]
  assignment_mappings     AssignmentMapping[]
  quizzes                 Quiz[]
  quiz_mappings           QuizMapping[]
  quiz_questions          QuizQuestion[]
  quiz_attempt_answers    QuizAttemptAnswer[]    @relation("QuizAttemptAnswerReviewedByTeacher")
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TeacherCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TeacherUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TeacherDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("teachers")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model TeacherEmailAddress {
  teacher_email_address_id Int      @id @default(autoincrement())
  tenant_id                Int
  teacher_id               Int
  email_address            String   @db.VarChar(255)
  is_primary               Boolean  @default(false)
  priority                 Int?
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by               Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  teacher                  Teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TeacherEmailAddressCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TeacherEmailAddressUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TeacherEmailAddressDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("teacher_email_addresses")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model TeacherPhoneNumber {
  teacher_phone_number_id  Int      @id @default(autoincrement())
  tenant_id                Int
  teacher_id               Int
  dial_code                String   @db.VarChar(10)
  phone_number             String   @db.VarChar(20)
  iso_country_code         String?  @db.VarChar(3)
  is_primary               Boolean  @default(false)
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by               Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  teacher                  Teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("TeacherPhoneNumberCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("TeacherPhoneNumberUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("TeacherPhoneNumberDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("teacher_phone_numbers")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}


// ============================================================================
// student-models.prisma
// ============================================================================

// Student profile and related entities (contact info, devices)

model Student {
  student_id              Int                    @id @default(autoincrement())
  tenant_id               Int
  full_name               String                 @db.VarChar(255)
  first_name              String                 @db.VarChar(100)
  middle_name             String?                @db.VarChar(100)
  last_name               String                 @db.VarChar(100)
  country_id              Int
  state_id                Int
  city_id                 Int
  address                 String?                @db.Text
  date_of_birth           DateTime?
  profile_picture_url     String?                @db.VarChar(500)
  zip_code                String?                @db.VarChar(20)
  age                     Int?
  gender                  Gender?                // Updated to use enum instead of Int?
  username                String                 @db.VarChar(50)
  password_hash           String                 @db.VarChar(255)
  last_login_at           DateTime?
  student_status          StudentStatus          @default(ACTIVE)
  referral_type           String?                @db.VarChar(100)
  
  // Audit fields
  is_active               Boolean                @default(true)
  is_deleted              Boolean                @default(false)
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?                @db.VarChar(45)
  updated_ip              String?                @db.VarChar(45)

  // Relationships
  tenant                  Tenant                 @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  country                 Country                @relation(fields: [country_id], references: [country_id], onDelete: Restrict)
  state                   State                  @relation(fields: [state_id], references: [state_id], onDelete: Restrict)
  city                    City                   @relation(fields: [city_id], references: [city_id], onDelete: Restrict)
  emails                  StudentEmailAddress[]
  phones                  StudentPhoneNumber[]
  devices                 StudentDevice[]
  enrollments             Enrollment[]
  student_progresses      StudentCourseProgress[]
  course_session_enrollments CourseSessionEnrollment[]
  video_progresses        VideoProgress[]
  student_institutes      StudentInstitute[]
  student_assignments     StudentAssignment[]
  quiz_attempts           QuizAttempt[]
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("StudentCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("StudentUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("StudentDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("students")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model StudentEmailAddress {
  student_email_address_id Int      @id @default(autoincrement())
  tenant_id                Int
  student_id               Int
  email_address            String   @db.VarChar(255)
  is_primary               Boolean  @default(false)
  priority                 Int?
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by               Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student                  Student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("StudentEmailAddressCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("StudentEmailAddressUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("StudentEmailAddressDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("student_email_addresses")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model StudentPhoneNumber {
  student_phone_number_id  Int      @id @default(autoincrement())
  tenant_id                Int
  student_id               Int
  dial_code                String   @db.VarChar(10)
  phone_number             String   @db.VarChar(20)
  iso_country_code         String?  @db.VarChar(3)
  is_primary               Boolean  @default(false)
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by               Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student                  Student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("StudentPhoneNumberCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("StudentPhoneNumberUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("StudentPhoneNumberDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("student_phone_numbers")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model StudentDevice {
  student_device_id        Int       @id @default(autoincrement())
  tenant_id                Int
  student_id               Int
  device_type              DeviceType // Updated to use enum instead of Int
  device_identifier        String    @db.VarChar(255)
  device_ip                String?   @db.VarChar(45)
  mac_address              String?   @db.VarChar(17)
  is_primary               Boolean   @default(false)
  last_active_at           DateTime  @default(now())
  
  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by               Int?
  created_ip               String?   @db.VarChar(45)
  updated_ip               String?   @db.VarChar(45)

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student                  Student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user   SystemUser        @relation("StudentDeviceCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user   SystemUser?       @relation("StudentDeviceUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user   SystemUser?       @relation("StudentDeviceDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("student_devices")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}


// ============================================================================
// course-models.prisma
// ============================================================================

// Course and content management models for LMS system

// Course model - main course entity
model Course {
  course_id            Int       @id @default(autoincrement())
  tenant_id            Int
  course_name          String    @db.VarChar(255)
  course_description   String?   @db.Text
  main_thumbnail_url   String?   @db.Text
  course_status        CourseStatus @default(DRAFT)
  course_type          CourseType @default(PAID)
  course_price         Decimal?  @db.Decimal(10, 2) // Nullable for free courses
  course_total_hours   Decimal?  @db.Decimal(6, 2) // Auto-calculated by backend from sum of video durations
  specialization_id    Int?
  
  // Audit fields
  is_active            Boolean   @default(true)
  is_deleted           Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?   @db.VarChar(45)
  updated_ip           String?   @db.VarChar(45)

  // Relationships
  tenant               Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  specialization       Specialization? @relation(fields: [specialization_id], references: [specialization_id], onDelete: SetNull)
  
  // Course content relationships
  modules              CourseModule[]
  videos               CourseVideo[]
  documents            CourseDocument[]
  
  // Enrollment and progress relationships
  enrollments          Enrollment[]
  student_progresses   StudentCourseProgress[]
  teacher_courses      TeacherCourse[]
  course_sessions      CourseSession[]
  assignments          Assignment[]
  quizzes              Quiz[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser   @relation("CourseCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?  @relation("CourseUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?  @relation("CourseDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("courses")
}

// CourseModule model - structural component of a course
model CourseModule {
  course_module_id     Int       @id @default(autoincrement())
  tenant_id            Int
  course_id            Int
  course_module_name   String    @db.VarChar(255)
  position             Int?
  
  // Audit fields
  is_active            Boolean   @default(true)
  is_deleted           Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?   @db.VarChar(45)
  updated_ip           String?   @db.VarChar(45)

  // Relationships
  tenant               Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course               Course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  topics               CourseTopic[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser   @relation("CourseModuleCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?  @relation("CourseModuleUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?  @relation("CourseModuleDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_modules")
}

// CourseTopic model - content topics within course modules
model CourseTopic {
  course_topic_id      Int       @id @default(autoincrement())
  tenant_id            Int
  module_id            Int
  course_topic_name    String    @db.VarChar(255)
  position             Int?
  
  // Audit fields
  is_active            Boolean   @default(true)
  is_deleted           Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?   @db.VarChar(45)
  updated_ip           String?   @db.VarChar(45)

  // Relationships
  tenant               Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  module               CourseModule @relation(fields: [module_id], references: [course_module_id], onDelete: Cascade)
  videos               CourseVideo[]
  documents            CourseDocument[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser   @relation("CourseTopicCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?  @relation("CourseTopicUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?  @relation("CourseTopicDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_topics")
}

// CourseVideo model - video content within course topics
model CourseVideo {
  course_video_id      Int       @id @default(autoincrement())
  tenant_id            Int
  course_id            Int
  course_topic_id      Int
  bunny_video_id       String    @db.VarChar(255)
  video_name           String    @db.VarChar(255)
  video_url            String    @db.Text
  thumbnail_url        String?   @db.Text
  duration_seconds     Int?
  position             Int?
  upload_status        VideoUploadStatus? @default(PENDING)
  IsLocked           Boolean   @default(false)
  
  // Audit fields
  is_active            Boolean   @default(true)
  is_deleted           Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?   @db.VarChar(45)
  updated_ip           String?   @db.VarChar(45)

  // Relationships
  tenant               Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course               Course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  topic                CourseTopic @relation(fields: [course_topic_id], references: [course_topic_id], onDelete: Cascade)
  video_progresses     VideoProgress[]
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser   @relation("CourseVideoCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?  @relation("CourseVideoUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?  @relation("CourseVideoDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_videos")
}

// CourseDocument model - document resources within course topics
model CourseDocument {
  course_document_id   Int       @id @default(autoincrement())
  tenant_id            Int
  course_id            Int
  course_topic_id      Int
  document_name        String    @db.VarChar(255)
  document_url         String    @db.Text
  
  // Audit fields
  is_active            Boolean   @default(true)
  is_deleted           Boolean   @default(false)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  created_by           Int
  updated_by           Int?
  deleted_at           DateTime?
  deleted_by           Int?
  created_ip           String?   @db.VarChar(45)
  updated_ip           String?   @db.VarChar(45)

  // Relationships
  tenant               Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course               Course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  topic                CourseTopic @relation(fields: [course_topic_id], references: [course_topic_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user      SystemUser   @relation("CourseDocumentCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user      SystemUser?  @relation("CourseDocumentUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user      SystemUser?  @relation("CourseDocumentDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_documents")
}


// ============================================================================
// enrollment-session-models.prisma
// ============================================================================

// Enrollment & Session Management Models

model Enrollment {
  enrollment_id             Int       @id @default(autoincrement())
  tenant_id                 Int
  course_id                 Int
  student_id                Int
  institute_id              Int
  teacher_id                Int?
  enrollment_status         EnrollmentStatus @default(PENDING)
  enrolled_at               DateTime  @default(now())
  expected_completion_date  DateTime?
  actual_completion_date    DateTime?
  status_changed_at         DateTime?
  status_changed_by         Int?
  status_change_reason      String?   @db.Text
  grade                     String?   @db.VarChar(10)
  final_score               Decimal?  @db.Decimal(5,2)

  // Audit fields
  is_active                 Boolean   @default(true)
  is_deleted                Boolean   @default(false)
  created_at                DateTime  @default(now())
  created_by                Int
  created_ip                String?   @db.VarChar(45)
  updated_at                DateTime? @updatedAt
  updated_by                Int?
  updated_ip                String?   @db.VarChar(45)
  deleted_at                DateTime?
  deleted_by                Int?

  // Relationships
  tenant                    Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course                    Course    @relation(fields: [course_id], references: [course_id], onDelete: Restrict)
  student                   Student   @relation(fields: [student_id], references: [student_id], onDelete: Restrict)
  institute                 Institute @relation(fields: [institute_id], references: [institute_id], onDelete: Restrict)
  teacher                   Teacher?  @relation(fields: [teacher_id], references: [teacher_id], onDelete: SetNull)
  status_changed_by_user    SystemUser? @relation("EnrollmentStatusChangedBy", fields: [status_changed_by], references: [system_user_id], onDelete: SetNull)
  status_history            EnrollmentStatusHistory[]
  
  // Audit trail relationships with SystemUser
  created_by_user           SystemUser @relation("EnrollmentCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user           SystemUser? @relation("EnrollmentUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user           SystemUser? @relation("EnrollmentDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("enrollments")
  // Unique constraints and indexes via custom SQL migrations
}

model EnrollmentStatusHistory {
  enrollment_status_history_id Int            @id @default(autoincrement())
  tenant_id                    Int
  enrollment_id                Int
  previous_status              EnrollmentStatus? // Updated to use enum instead of previous_status_id Int?
  new_status                   EnrollmentStatus  // Updated to use enum instead of new_status_id Int
  status_changed_at            DateTime       @default(now())
  changed_by                   Int
  change_reason                String?        @db.Text
  notes                        String?        @db.Text

  // Audit fields
  is_active                    Boolean        @default(true)
  is_deleted                   Boolean        @default(false)
  created_at                   DateTime       @default(now())
  created_by                   Int
  created_ip                   String?        @db.VarChar(45)
  updated_at                   DateTime?      @updatedAt
  updated_by                   Int?
  updated_ip                   String?        @db.VarChar(45)
  deleted_at                   DateTime?
  deleted_by                   Int?

  // Relationships
  tenant                       Tenant         @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  enrollment                   Enrollment     @relation(fields: [enrollment_id], references: [enrollment_id], onDelete: Cascade)
  changed_by_user              SystemUser     @relation("EnrollmentStatusHistoryChangedBy", fields: [changed_by], references: [system_user_id], onDelete: Restrict)
  
  // Audit trail relationships with SystemUser
  created_by_user              SystemUser     @relation("EnrollmentStatusHistoryCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user              SystemUser?    @relation("EnrollmentStatusHistoryUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user              SystemUser?    @relation("EnrollmentStatusHistoryDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("enrollment_status_histories")
  // Unique constraints and indexes via custom SQL migrations
}

model StudentCourseProgress {
  student_course_progress_id    Int       @id @default(autoincrement())
  tenant_id                     Int
  student_id                    Int
  course_id                     Int
  overall_progress_percentage   Int       @default(0)
  modules_completed             Int       @default(0)
  videos_completed              Int       @default(0)
  quizzes_completed             Int       @default(0)
  assignments_completed         Int       @default(0)
  total_time_spent_minutes      Int       @default(0)
  last_accessed_at              DateTime  @default(now())
  is_course_completed           Boolean   @default(false)
  completion_date               DateTime?

  // Audit fields
  is_active                     Boolean   @default(true)
  is_deleted                    Boolean   @default(false)
  created_at                    DateTime  @default(now())
  created_by                    Int
  created_ip                    String?    @db.VarChar(45)
  updated_at                    DateTime? @updatedAt
  updated_by                    Int?
  updated_ip                    String?   @db.VarChar(45)
  deleted_at                    DateTime?
  deleted_by                    Int?

  // Relationships
  tenant                        Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student                       Student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  course                        Course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user               SystemUser @relation("StudentCourseProgressCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user               SystemUser? @relation("StudentCourseProgressUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user               SystemUser? @relation("StudentCourseProgressDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("student_course_progresses")
  // Unique constraints and indexes via custom SQL migrations
}

model TeacherCourse {
  teacher_course_id        Int       @id @default(autoincrement())
  tenant_id                Int
  course_id                Int
  teacher_id               Int

  // Audit fields
  is_active                Boolean   @default(true)
  is_deleted               Boolean   @default(false)
  created_at               DateTime  @default(now())
  created_by               Int
  created_ip               String?    @db.VarChar(45)
  updated_at               DateTime? @updatedAt
  updated_by               Int?
  updated_ip               String?   @db.VarChar(45)
  deleted_at               DateTime?
  deleted_by               Int?

  // Relationships
  tenant                   Tenant    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course                   Course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  teacher                  Teacher   @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user          SystemUser @relation("TeacherCourseCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user          SystemUser? @relation("TeacherCourseUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user          SystemUser? @relation("TeacherCourseDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("teacher_courses")
  // Unique constraints and indexes via custom SQL migrations
}

model CourseSession {
  course_session_id        Int      @id @default(autoincrement())
  tenant_id                Int
  teacher_id               Int
  course_id                Int
  course_session_status    CourseSessionStatus @default(DRAFT)
  session_name             String   @db.VarChar(255)
  session_description      String?  @db.Text
  start_date               DateTime
  end_date                 DateTime
  max_students             Int?
  enrollment_deadline      DateTime?
  session_timezone         String?  @db.VarChar(50)
  session_code             String?  @db.VarChar(20)
  auto_expire_enabled      Boolean  @default(true)

  // Audit fields
  is_active                Boolean  @default(true)
  is_deleted               Boolean  @default(false)
  created_at               DateTime @default(now())
  created_by               Int
  created_ip               String?   @db.VarChar(45)
  updated_at               DateTime? @updatedAt
  updated_by               Int?
  updated_ip               String?  @db.VarChar(45)
  deleted_at               DateTime?
  deleted_by               Int?

  // Relationships
  tenant                   Tenant   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  teacher                  Teacher  @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)
  course                   Course   @relation(fields: [course_id], references: [course_id], onDelete: Restrict)
  enrollments              CourseSessionEnrollment[]
  announcements            CourseSessionAnnouncement[] // Keep the relation to the model defined in notification-models.prisma
  settings                 CourseSessionSettings?
  
  // Audit trail relationships with SystemUser
  created_by_user          SystemUser @relation("CourseSessionCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user          SystemUser? @relation("CourseSessionUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user          SystemUser? @relation("CourseSessionDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_sessions")
  // Unique constraints and indexes via custom SQL migrations
}

model CourseSessionEnrollment {
  course_session_enrollment_id Int      @id @default(autoincrement())
  tenant_id                    Int
  course_session_id            Int
  student_id                   Int
  enrolled_at                  DateTime @default(now())
  dropped_at                   DateTime?
  enrollment_status            SessionEnrollmentStatus @default(PENDING)
  completion_percentage        Int      @default(0)
  final_grade                  Int?
  completion_date              DateTime?

  // Audit fields
  is_active                    Boolean  @default(true)
  is_deleted                   Boolean  @default(false)
  created_at                   DateTime @default(now())
  created_by                   Int
  created_ip                   String?   @db.VarChar(45)
  updated_at                   DateTime? @updatedAt
  updated_by                   Int?
  updated_ip                   String?  @db.VarChar(45)
  deleted_at                   DateTime?
  deleted_by                   Int?

  // Relationships
  tenant                       Tenant           @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course_session               CourseSession    @relation(fields: [course_session_id], references: [course_session_id], onDelete: Cascade)
  student                      Student          @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user              SystemUser       @relation("CourseSessionEnrollmentCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user              SystemUser?      @relation("CourseSessionEnrollmentUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user              SystemUser?      @relation("CourseSessionEnrollmentDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_session_enrollments")
  // Unique constraints and indexes via custom SQL migrations
}

model CourseSessionSettings {
  course_session_settings_id      Int     @id @default(autoincrement())
  tenant_id                       Int
  course_session_id               Int     @unique
  allow_late_enrollment           Boolean @default(false)
  require_approval_for_enrollment Boolean @default(false)
  allow_student_discussions       Boolean @default(true)
  send_reminder_emails            Boolean @default(true)
  reminder_days_before_expiry     Int     @default(7)
  grading_scale                   Json?
  attendance_tracking_enabled     Boolean @default(false)

  // Audit fields
  is_active                       Boolean  @default(true)
  is_deleted                      Boolean  @default(false)
  created_at                      DateTime @default(now())
  created_by                      Int
  created_ip                      String?   @db.VarChar(45)
  updated_at                      DateTime? @updatedAt
  updated_by                      Int?
  updated_ip                      String?  @db.VarChar(45)
  deleted_at                      DateTime?
  deleted_by                      Int?

  // Relationships
  tenant                          Tenant        @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course_session                  CourseSession @relation(fields: [course_session_id], references: [course_session_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user                 SystemUser    @relation("CourseSessionSettingsCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user                 SystemUser?   @relation("CourseSessionSettingsUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user                 SystemUser?   @relation("CourseSessionSettingsDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("course_session_settings")
  // Indexes via custom SQL migrations
}

model VideoProgress {
  video_progress_id       Int             @id @default(autoincrement())
  tenant_id               Int
  student_id              Int
  course_video_id         Int
  watch_duration_seconds  Int             @default(0)
  completion_percentage   Int             @default(0)
  last_watched_at         DateTime        @default(now())
  is_completed            Boolean         @default(false)

  // Audit fields
  is_active               Boolean         @default(true)
  is_deleted              Boolean         @default(false)
  created_at              DateTime        @default(now())
  created_by              Int
  created_ip              String?          @db.VarChar(45)
  updated_at              DateTime?       @updatedAt
  updated_by              Int?
  updated_ip              String?         @db.VarChar(45)
  deleted_at              DateTime?
  deleted_by              Int?

  // Relationships
  tenant                  Tenant          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student                 Student         @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  video                   CourseVideo     @relation(fields: [course_video_id], references: [course_video_id], onDelete: Cascade)
  
  // Audit trail relationships with SystemUser
  created_by_user         SystemUser      @relation("VideoProgressCreatedBy", fields: [created_by], references: [system_user_id], onDelete: Restrict)
  updated_by_user         SystemUser?     @relation("VideoProgressUpdatedBy", fields: [updated_by], references: [system_user_id], onDelete: SetNull)
  deleted_by_user         SystemUser?     @relation("VideoProgressDeletedBy", fields: [deleted_by], references: [system_user_id], onDelete: SetNull)

  @@map("video_progresses")
  // Unique constraints and indexes via custom SQL migrations
}


// ============================================================================
// quiz-models.prisma
// ============================================================================

// Quiz-related models

model Quiz {
  quiz_id             Int              @id @default(autoincrement())
  tenant_id           Int
  course_id           Int
  teacher_id          Int              // Teacher who owns the quiz content
  quiz_name           String           @db.VarChar(255)
  quiz_description    String?          @db.Text
  total_marks         Decimal          @db.Decimal(6, 2)
  passing_marks       Decimal?         @db.Decimal(6, 2)
  time_limit_minutes  Int?
  max_attempts        Int?
  allow_retake        Boolean          @default(false)
  randomize_questions Boolean          @default(false)
  due_date            DateTime?
  status              QuizStatus       @default(DRAFT)
  instructions        String?          @db.Text

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active           Boolean          @default(true)
  is_deleted          Boolean          @default(false)
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  created_by          Int
  updated_by          Int?
  deleted_at          DateTime?
  deleted_by          Int?
  created_ip          String?          @db.VarChar(45)
  updated_ip          String?          @db.VarChar(45)

  // Relationships
  tenant              Tenant           @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course              Course           @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  teacher             Teacher          @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)
  
  // Related entities
  quiz_mappings       QuizMapping[]
  quiz_questions      QuizQuestion[]
  quiz_attempts       QuizAttempt[]

  @@map("quizzes")
}

model QuizMapping {
  quiz_mapping_id      Int                 @id @default(autoincrement())
  tenant_id            Int
  quiz_id              Int
  reference_table_type QuizReferenceTable
  reference_id         Int
  teacher_id           Int                 // Teacher who created this mapping (may differ from quiz owner)

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active           Boolean             @default(true)
  is_deleted          Boolean             @default(false)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  created_by          Int
  updated_by          Int?
  deleted_at          DateTime?
  deleted_by          Int?
  created_ip          String?             @db.VarChar(45)
  updated_ip          String?             @db.VarChar(45)

  // Relationships
  tenant              Tenant              @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  quiz                Quiz                @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)
  teacher             Teacher             @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)

  @@map("quiz_mappings")
}

model QuizQuestion {
  quiz_question_id    Int               @id @default(autoincrement())
  tenant_id           Int
  quiz_id             Int
  teacher_id          Int               // Teacher who created this specific question
  question_text       String            @db.Text
  question_type       QuizQuestionType
  question_marks      Decimal           @db.Decimal(6, 2)
  position            Int

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active           Boolean           @default(true)
  is_deleted          Boolean           @default(false)
  created_at          DateTime          @default(now())
  updated_at          DateTime         @updatedAt
  created_by          Int
  updated_by          Int?
  deleted_at          DateTime?
  deleted_by          Int?
  created_ip          String?           @db.VarChar(45)
  updated_ip          String?           @db.VarChar(45)

  // Relationships
  tenant              Tenant            @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  quiz                Quiz              @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)
  teacher             Teacher           @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)
  
  // Related entities
  quiz_question_options QuizQuestionOption[]
  quiz_question_answers QuizQuestionAnswer[]
  quiz_attempt_answers  QuizAttemptAnswer[]

  @@map("quiz_questions")
}

model QuizQuestionOption {
  quiz_question_option_id Int            @id @default(autoincrement())
  tenant_id               Int
  quiz_question_id        Int
  option_text             String         @db.Text
  position                Int
  is_correct              Boolean        @default(false)

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active               Boolean        @default(true)
  is_deleted              Boolean        @default(false)
  created_at              DateTime       @default(now())
  updated_at              DateTime       @default(now())
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?        @db.VarChar(45)
  updated_ip              String?        @db.VarChar(45)

  // Relationships
  tenant                  Tenant         @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  quiz_question           QuizQuestion   @relation(fields: [quiz_question_id], references: [quiz_question_id], onDelete: Cascade)
  
  // Related entities
  quiz_attempt_answers    QuizAttemptAnswer[]

  @@map("quiz_question_options")
}

model QuizQuestionAnswer {
  quiz_question_answer_id Int            @id @default(autoincrement())
  tenant_id               Int
  quiz_question_id        Int
  answer_text             String         @db.Text

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active               Boolean        @default(true)
  is_deleted              Boolean        @default(false)
  created_at              DateTime       @default(now())
  updated_at              DateTime       @default(now())
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?        @db.VarChar(45)
  updated_ip              String?        @db.VarChar(45)

  // Relationships
  tenant                  Tenant         @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  quiz_question           QuizQuestion   @relation(fields: [quiz_question_id], references: [quiz_question_id], onDelete: Cascade)

  @@map("quiz_question_answers")
}

model QuizAttempt {
  quiz_attempt_id     Int                 @id @default(autoincrement())
  tenant_id           Int
  quiz_id             Int
  student_id          Int
  attempt_number      Int
  started_at          DateTime
  submitted_at        DateTime?
  score               Decimal?            @db.Decimal(6, 2)
  percentage          Decimal?            @db.Decimal(5, 2)
  status              QuizAttemptStatus
  time_taken_minutes  Int?
  graded_by           Int?                // Reference to either teacher or admin who graded
  graded_at           DateTime?
  teacher_notes       String?             @db.Text  // Notes from teacher for this attempt

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active           Boolean             @default(true)
  is_deleted          Boolean             @default(false)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @default(now())
  created_by          Int
  updated_by          Int?
  deleted_at          DateTime?
  deleted_by          Int?
  created_ip          String?             @db.VarChar(45)
  updated_ip          String?             @db.VarChar(45)

  // Relationships
  tenant              Tenant              @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  quiz                Quiz                @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)
  student             Student             @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  
  // Related entities
  quiz_attempt_answers QuizAttemptAnswer[]

  @@map("quiz_attempts")
}

model QuizAttemptAnswer {
  quiz_attempt_answer_id   Int            @id @default(autoincrement())
  tenant_id                Int
  quiz_attempt_id          Int
  quiz_question_id         Int
  quiz_question_option_id  Int?
  answer_text              String?        @db.Text
  is_correct               Boolean?
  marks_obtained           Decimal?       @db.Decimal(6, 2)
  reviewed_by_teacher_id   Int?           // Teacher who reviewed/verified this specific answer
  teacher_comment          String?        @db.Text

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active                Boolean        @default(true)
  is_deleted               Boolean        @default(false)
  created_at               DateTime       @default(now())
  updated_at               DateTime       @default(now())
  created_by               Int
  updated_by               Int?
  deleted_at               DateTime?
  deleted_by               Int?
  created_ip               String?        @db.VarChar(45)
  updated_ip               String?        @db.VarChar(45)

  // Relationships
  tenant                   Tenant         @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  quiz_attempt             QuizAttempt    @relation(fields: [quiz_attempt_id], references: [quiz_attempt_id], onDelete: Cascade)
  quiz_question            QuizQuestion   @relation(fields: [quiz_question_id], references: [quiz_question_id])
  quiz_question_option     QuizQuestionOption? @relation(fields: [quiz_question_option_id], references: [quiz_question_option_id])
  reviewing_teacher        Teacher?       @relation("QuizAttemptAnswerReviewedByTeacher", fields: [reviewed_by_teacher_id], references: [teacher_id], onDelete: SetNull)

  @@map("quiz_attempt_answers")
}


// ============================================================================
// assignment-models.prisma
// ============================================================================

// Assignment-related models

model Assignment {
  assignment_id          Int                @id @default(autoincrement())
  tenant_id              Int
  course_id              Int
  teacher_id             Int                // Teacher who created/owns the assignment
  assignment_name        String             @db.VarChar(255)
  assignment_description String?            @db.Text
  assignment_type        AssignmentType     @default(FILE_UPLOAD)
  total_marks            Decimal            @db.Decimal(6, 2)
  passing_marks          Decimal?           @db.Decimal(6, 2)
  due_date               DateTime
  allow_late_submissions Boolean            @default(false)
  max_file_size_mb       Int?
  allowed_file_types     String?            @db.Text
  max_attempts           Int?
  status                 AssignmentStatus   @default(DRAFT)
  instructions           String?            @db.Text

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active              Boolean            @default(true)
  is_deleted             Boolean            @default(false)
  created_at             DateTime           @default(now())
  updated_at             DateTime           @default(now())
  created_by             Int
  updated_by             Int?
  deleted_at             DateTime?
  deleted_by             Int?
  created_ip             String?            @db.VarChar(45)
  updated_ip             String?            @db.VarChar(45)

  // Relationships
  tenant                 Tenant             @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course                 Course             @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  teacher                Teacher            @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)
  
  // Related entities
  assignment_mappings    AssignmentMapping[]
  student_assignments    StudentAssignment[]

  @@map("assignments")
}

model AssignmentMapping {
  assignment_mapping_id Int                       @id @default(autoincrement())
  tenant_id             Int
  assignment_id         Int
  reference_table_type  AssignmentReferenceTable
  reference_id          Int
  teacher_id            Int                       // Teacher who created this mapping

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active             Boolean                   @default(true)
  is_deleted            Boolean                   @default(false)
  created_at            DateTime                  @default(now())
  updated_at            DateTime                  @default(now())
  created_by            Int
  updated_by            Int?
  deleted_at            DateTime?
  deleted_by            Int?
  created_ip            String?                   @db.VarChar(45)
  updated_ip            String?                   @db.VarChar(45)

  // Relationships
  tenant                Tenant                    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  assignment            Assignment                @relation(fields: [assignment_id], references: [assignment_id], onDelete: Cascade)
  teacher               Teacher                   @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)

  @@map("assignment_mappings")
}

model StudentAssignment {
  student_assignment_id   Int                @id @default(autoincrement())
  tenant_id               Int
  assignment_id           Int
  student_id              Int
  attempt_number          Int
  submission_date         DateTime?
  submission_status       SubmissionStatus   @default(PENDING)
  grade                   Decimal?           @db.Decimal(6, 2)
  percentage              Decimal?           @db.Decimal(5, 2)
  feedback                String?            @db.Text
  graded_by               Int?               // Reference to either teacher or admin who graded
  graded_at               DateTime?
  teacher_notes           String?            @db.Text  // Notes from teacher about this submission
  is_late_submission      Boolean            @default(false)

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active               Boolean            @default(true)
  is_deleted              Boolean            @default(false)
  created_at              DateTime           @default(now())
  updated_at              DateTime           @default(now())
  created_by              Int
  updated_by              Int?
  deleted_at              DateTime?
  deleted_by              Int?
  created_ip              String?            @db.VarChar(45)
  updated_ip              String?            @db.VarChar(45)

  // Relationships
  tenant                  Tenant             @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  assignment              Assignment         @relation(fields: [assignment_id], references: [assignment_id], onDelete: Cascade)
  student                 Student            @relation(fields: [student_id], references: [student_id], onDelete: Cascade)

  // Related entities
  submission_files        AssignmentSubmissionFile[]

  @@map("student_assignments")
}

model AssignmentSubmissionFile {
  assignment_submission_file_id Int              @id @default(autoincrement())
  tenant_id                     Int
  student_assignment_id         Int
  original_file_name            String           @db.VarChar(255)
  file_url                      String           @db.Text
  file_size_bytes               Int?
  mime_type                     String?          @db.VarChar(128)
  upload_status                 UploadStatus?    @default(PENDING)

  // Standard audit and tenant fields (keep fields, remove relationships)
  is_active                     Boolean          @default(true)
  is_deleted                    Boolean          @default(false)
  created_at                    DateTime         @default(now())
  updated_at                    DateTime         @default(now())
  created_by                    Int
  updated_by                    Int?
  deleted_at                    DateTime?
  deleted_by                    Int?
  created_ip                    String?          @db.VarChar(45)
  updated_ip                    String?          @db.VarChar(45)

  // Relationships
  tenant                        Tenant           @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  student_assignment            StudentAssignment @relation(fields: [student_assignment_id], references: [student_assignment_id], onDelete: Cascade)

  @@map("assignment_submission_files")
}


// ============================================================================
// notification-models.prisma
// ============================================================================

// Notification-related models for LMS system

// Main notification model for general platform notifications
model Notification {
  notification_id            Int                   @id @default(autoincrement())
  tenant_id                  Int
  title                      String                @db.VarChar(255)
  message                    String                @db.Text
  notification_type          NotificationType      // Updated to use enum instead of Int
  priority                   NotificationPriority  @default(NORMAL) // Updated to use enum instead of Int @default(2)
  sender_id                  Int?                  // Optional reference to the user who sent the notification
  category_id                Int?                  // Optional reference to notification category
  scheduled_at               DateTime?             // When the notification should be delivered
  expires_at                 DateTime?             // When the notification expires/should be removed
  metadata                   Json?                 // Additional dynamic content for the notification
  is_read_receipt_required   Boolean               @default(false)
  target_audience            String?               @db.Text // JSON array of target criteria

  // Audit fields
  is_active                  Boolean               @default(true)
  is_deleted                 Boolean               @default(false)
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt
  created_by                 Int
  updated_by                 Int?
  deleted_at                 DateTime?
  deleted_by                 Int?
  created_ip                 String?               @db.VarChar(45)
  updated_ip                 String?               @db.VarChar(45)

  // Relationships
  tenant                     Tenant                @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
    
  // Delivery related entities
  notification_deliveries    NotificationDelivery[]
  email_queues               EmailQueue[]
  
  @@map("notifications")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

// Course session announcements for course-specific communications
model CourseSessionAnnouncement {
  announcement_id            Int                   @id @default(autoincrement())
  tenant_id                  Int
  course_session_id          Int                   // Reference to the course session
  teacher_id                 Int                   // Teacher who created the announcement
  title                      String                @db.VarChar(255)
  content                    String                @db.Text
  announcement_type          Int                   @default(1) // 1-GENERAL, 2-ASSIGNMENT_DUE, 3-DEADLINE, etc.
  is_pinned                  Boolean               @default(false)
  is_published               Boolean               @default(true)
  publish_date               DateTime              @default(now())
  expiry_date                DateTime?             // Optional expiration date
  attachment_url             String?               @db.Text
  attachment_type            String?               @db.VarChar(50)
  
  // Audit fields
  is_active                  Boolean               @default(true)
  is_deleted                 Boolean               @default(false)
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt
  created_by                 Int
  updated_by                 Int?
  deleted_at                 DateTime?
  deleted_by                 Int?
  created_ip                 String?               @db.VarChar(45)
  updated_ip                 String?               @db.VarChar(45)

  // Relationships
  tenant                     Tenant                @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  course_session             CourseSession         @relation(fields: [course_session_id], references: [course_session_id], onDelete: Cascade)
  teacher                    Teacher               @relation(fields: [teacher_id], references: [teacher_id], onDelete: Restrict)
  
  @@map("course_session_announcements")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

// Related delivery models
model NotificationDelivery {
  notification_delivery_id   Int                   @id @default(autoincrement())
  tenant_id                  Int
  notification_id            Int
  recipient_id               Int                   // ID of the recipient (student_id, teacher_id, etc.)
  recipient_type             RecipientType         // Updated to use enum instead of Int
  delivery_channel           DeliveryChannel       // Updated to use enum instead of Int
  delivery_status            DeliveryStatus        @default(PENDING) // Updated to use enum instead of Int @default(1)
  delivered_at               DateTime?
  read_at                    DateTime?
  dismissed_at               DateTime?
  failure_reason             String?               @db.Text
  retry_count                Int                   @default(0)
  delivery_metadata          Json?                 // Channel-specific metadata

  // Audit fields
  is_active                  Boolean               @default(true)
  is_deleted                 Boolean               @default(false)
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt
  created_by                 Int
  updated_by                 Int?
  deleted_at                 DateTime?
  deleted_by                 Int?
  created_ip                 String?               @db.VarChar(45)
  updated_ip                 String?               @db.VarChar(45)

  // Relationships
  tenant                     Tenant                @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  notification               Notification          @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade)
  
  @@map("notification_deliveries")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

model EmailQueue {
  email_queue_id             Int                   @id @default(autoincrement())
  tenant_id                  Int
  notification_id            Int
  recipient_email            String                @db.VarChar(255)
  recipient_name             String?               @db.VarChar(255)
  subject                    String                @db.VarChar(255)
  body_html                  String?               @db.Text
  body_text                  String?               @db.Text
  send_status                EmailSendStatus       @default(PENDING) // Updated to use enum instead of Int @default(1)
  send_attempts              Int                   @default(0)
  last_attempt_at            DateTime?
  sent_at                    DateTime?
  failure_reason             String?               @db.Text
  priority                   Int                   @default(5) // 1-10, higher = more priority
  scheduled_for              DateTime?
  email_provider_id          String?               @db.VarChar(255)

  // Audit fields
  is_active                  Boolean               @default(true)
  is_deleted                 Boolean               @default(false)
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @default(now())
  created_by                 Int
  updated_by                 Int?
  deleted_at                 DateTime?
  deleted_by                 Int?
  created_ip                 String?               @db.VarChar(45)
  updated_ip                 String?               @db.VarChar(45)

  // Relationships
  tenant                     Tenant                @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  notification               Notification          @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade)
  
  @@map("email_queues")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

// Notification templates for reusable message formats
model NotificationTemplate {
  notification_template_id   Int                   @id @default(autoincrement())
  tenant_id                  Int
  template_name              String                @db.VarChar(255)
  template_type              TemplateType          // Updated to use enum
  subject_template           String?               @db.Text // For email templates
  body_template              String                @db.Text
  variables                  Json?                 // Available template variables as JSON array
  is_system_template         Boolean               @default(false) // Whether this is a system-wide template

  // Audit fields
  is_active                  Boolean               @default(true)
  is_deleted                 Boolean               @default(false)
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt
  created_by                 Int
  updated_by                 Int?
  deleted_at                 DateTime?
  deleted_by                 Int?
  created_ip                 String?               @db.VarChar(45)
  updated_ip                 String?               @db.VarChar(45)

  // Relationships
  tenant                     Tenant                @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  
  @@map("notification_templates")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

// Push notification devices for mobile/web push notifications
model PushNotificationDevice {
  push_device_id             Int                   @id @default(autoincrement())
  tenant_id                  Int
  user_id                    Int                   // ID of the user (student_id, teacher_id, system_user_id)
  user_type                  RecipientType         // Updated to use enum
  device_token               String                @db.VarChar(500)
  device_type                DeviceType            // Updated to use enum
  app_version                String?               @db.VarChar(50)
  os_version                 String?               @db.VarChar(50)
  is_production              Boolean               @default(true) // Whether this is a production or sandbox token
  last_used_at               DateTime?
  expires_at                 DateTime?

  // Audit fields
  is_active                  Boolean               @default(true)
  is_deleted                 Boolean               @default(false)
  created_at                 DateTime              @default(now())
  updated_at                 DateTime              @updatedAt
  created_by                 Int
  updated_by                 Int?
  deleted_at                 DateTime?
  deleted_by                 Int?
  created_ip                 String?               @db.VarChar(45)
  updated_ip                 String?               @db.VarChar(45)

  // Relationships
  tenant                     Tenant                @relation(fields: [tenant_id], references: [tenant_id], onDelete: Restrict)
  
  @@map("push_notification_devices")
  // Note: Unique constraints and indexes will be implemented via custom SQL in Prisma migrations
}

