{
  "info": {
    "_postman_id": "8a2c9f4b-6e51-4ac2-9f7d-315e8b72c93b",
    "name": "System User Management",
    "description": "Comprehensive collection for managing system users in the Learning Management System (LMS). These endpoints handle system user creation, updates, role-based access control, and tenant isolation with proper authentication and authorization.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints for different user roles.",
      "item": [
        {
          "name": "Login as SuperAdmin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accessToken).to.exist;",
                  "    pm.environment.set('superAdminAccessToken', jsonData.data.accessToken);",
                  "    pm.environment.set('superAdminUserId', jsonData.data.user.system_user_id);",
                  "    pm.environment.set('superAdminRole', jsonData.data.user.role_type);",
                  "    pm.environment.set('superAdminTenantId', jsonData.data.user.tenant_id);",
                  "});",
                  "",
                  "pm.test('User has SuperAdmin role', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.role_type).to.eql('SUPER_ADMIN');",
                  "    pm.expect(jsonData.data.user.tenant_id).to.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('superadmin_email', 'superadmin@lms.com');",
                  "pm.environment.set('superadmin_password', 'SuperAdmin@123');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email_address\": \"{{superadmin_email}}\",\n    \"password\": \"{{superadmin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate as a SuperAdmin user to perform global system user operations."
          },
          "response": []
        },
        {
          "name": "Login as TenantAdmin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.accessToken).to.exist;",
                  "    pm.environment.set('tenantAdminAccessToken', jsonData.data.accessToken);",
                  "    pm.environment.set('tenantAdminUserId', jsonData.data.user.system_user_id);",
                  "    pm.environment.set('tenantAdminRole', jsonData.data.user.role_type);",
                  "    pm.environment.set('tenantAdminTenantId', jsonData.data.user.tenant_id);",
                  "});",
                  "",
                  "pm.test('User has TenantAdmin role', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user.role_type).to.eql('TENANT_ADMIN');",
                  "    pm.expect(jsonData.data.user.tenant_id).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('tenant_admin_email', 'tenant.admin@lms.com');",
                  "pm.environment.set('tenant_admin_password', 'TenantAdmin@123');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email_address\": \"{{tenant_admin_email}}\",\n    \"password\": \"{{tenant_admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate as a TenantAdmin user to perform tenant-specific system user operations."
          },
          "response": []
        }
      ]
    },
    {
      "name": "SuperAdmin Operations",
      "description": "Operations that can be performed by users with the SuperAdmin role.",
      "item": [
        {
          "name": "Create SuperAdmin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('SuperAdmin user created with correct data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('system_user_id');",
                  "    pm.expect(jsonData.data.username).to.eql(pm.environment.get('new_superadmin_username'));",
                  "    pm.expect(jsonData.data.full_name).to.eql(pm.environment.get('new_superadmin_fullname'));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get('new_superadmin_email'));",
                  "    pm.expect(jsonData.data.role_type).to.eql('SUPER_ADMIN');",
                  "    pm.expect(jsonData.data.tenant_id).to.be.null;",
                  "    pm.expect(jsonData.data.system_user_status).to.eql('ACTIVE');",
                  "    ",
                  "    // Store created user ID for subsequent tests",
                  "    pm.environment.set('created_superadmin_id', jsonData.data.system_user_id);",
                  "});",
                  "",
                  "pm.test('Response has audit fields', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('created_at');",
                  "    pm.expect(jsonData.data).to.have.property('created_by');",
                  "    pm.expect(jsonData.data.is_active).to.be.true;",
                  "    pm.expect(jsonData.data.is_deleted).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique SuperAdmin user data",
                  "const timestamp = Date.now();",
                  "const username = `superadmin_${timestamp}`;",
                  "const fullName = `Super Administrator ${timestamp}`;",
                  "const email = `superadmin.${timestamp}@lms.com`;",
                  "",
                  "pm.environment.set('new_superadmin_username', username);",
                  "pm.environment.set('new_superadmin_fullname', fullName);",
                  "pm.environment.set('new_superadmin_email', email);",
                  "pm.environment.set('new_superadmin_password', 'SecurePassword@123');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{new_superadmin_username}}\",\n    \"fullName\": \"{{new_superadmin_fullname}}\",\n    \"email\": \"{{new_superadmin_email}}\",\n    \"password\": \"{{new_superadmin_password}}\",\n    \"roleType\": \"SUPER_ADMIN\",\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "Create a new SuperAdmin user. Only SuperAdmin can create other SuperAdmin users."
          },
          "response": []
        },
        {
          "name": "Create TenantAdmin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('TenantAdmin user created with correct data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('system_user_id');",
                  "    pm.expect(jsonData.data.username).to.eql(pm.environment.get('new_tenantadmin_username'));",
                  "    pm.expect(jsonData.data.full_name).to.eql(pm.environment.get('new_tenantadmin_fullname'));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get('new_tenantadmin_email'));",
                  "    pm.expect(jsonData.data.role_type).to.eql('TENANT_ADMIN');",
                  "    pm.expect(jsonData.data.tenant_id).to.eql(parseInt(pm.environment.get('test_tenant_id')));",
                  "    pm.expect(jsonData.data.system_user_status).to.eql('ACTIVE');",
                  "    ",
                  "    // Store created user ID for subsequent tests",
                  "    pm.environment.set('created_tenantadmin_id', jsonData.data.system_user_id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique TenantAdmin user data",
                  "const timestamp = Date.now();",
                  "const username = `tenantadmin_${timestamp}`;",
                  "const fullName = `Tenant Administrator ${timestamp}`;",
                  "const email = `tenantadmin.${timestamp}@lms.com`;",
                  "",
                  "pm.environment.set('new_tenantadmin_username', username);",
                  "pm.environment.set('new_tenantadmin_fullname', fullName);",
                  "pm.environment.set('new_tenantadmin_email', email);",
                  "pm.environment.set('new_tenantadmin_password', 'SecurePassword@123');",
                  "",
                  "// Use a test tenant ID (should be set from previous tenant operations)",
                  "pm.environment.set('test_tenant_id', '1');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{new_tenantadmin_username}}\",\n    \"fullName\": \"{{new_tenantadmin_fullname}}\",\n    \"email\": \"{{new_tenantadmin_email}}\",\n    \"password\": \"{{new_tenantadmin_password}}\",\n    \"roleType\": \"TENANT_ADMIN\",\n    \"tenantId\": {{test_tenant_id}},\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "Create a new TenantAdmin user associated with a specific tenant."
          },
          "response": []
        },
        {
          "name": "Get All System Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination metadata', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.pagination).to.exist;",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "    pm.expect(jsonData.pagination).to.have.property('totalPages');",
                  "    pm.expect(jsonData.pagination).to.have.property('hasNext');",
                  "    pm.expect(jsonData.pagination).to.have.property('hasPrev');",
                  "});",
                  "",
                  "pm.test('Response contains users array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('User objects have required fields', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const user = jsonData.data[0];",
                  "        pm.expect(user).to.have.property('system_user_id');",
                  "        pm.expect(user).to.have.property('username');",
                  "        pm.expect(user).to.have.property('full_name');",
                  "        pm.expect(user).to.have.property('email_address');",
                  "        pm.expect(user).to.have.property('role_type');",
                  "        pm.expect(user).to.have.property('system_user_status');",
                  "        pm.expect(user).to.have.property('created_at');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["system-users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all system users with pagination. SuperAdmin can view all users across all tenants."
          },
          "response": []
        },
        {
          "name": "Get System Users with Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filtered results match criteria', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(user => {",
                  "            pm.expect(user.role_type).to.eql('TENANT_ADMIN');",
                  "            pm.expect(user.system_user_status).to.eql('ACTIVE');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users?page=1&limit=10&roleType=TENANT_ADMIN&status=ACTIVE&tenantId={{test_tenant_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "roleType",
                  "value": "TENANT_ADMIN"
                },
                {
                  "key": "status",
                  "value": "ACTIVE"
                },
                {
                  "key": "tenantId",
                  "value": "{{test_tenant_id}}"
                }
              ]
            },
            "description": "Get system users with role, status, and tenant filters."
          },
          "response": []
        },
        {
          "name": "Search System Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain search term', function () {",
                  "    var jsonData = pm.response.json();",
                  "    const searchTerm = pm.environment.get('search_term').toLowerCase();",
                  "    if (jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(user => {",
                  "            const matchFound = ",
                  "                user.username.toLowerCase().includes(searchTerm) ||",
                  "                user.full_name.toLowerCase().includes(searchTerm) ||",
                  "                user.email_address.toLowerCase().includes(searchTerm);",
                  "            pm.expect(matchFound).to.be.true;",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": ["pm.environment.set('search_term', 'admin');"],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users?search={{search_term}}",
              "host": ["{{base_url}}"],
              "path": ["system-users"],
              "query": [
                {
                  "key": "search",
                  "value": "{{search_term}}"
                }
              ]
            },
            "description": "Search system users by username, full name, or email address."
          },
          "response": []
        },
        {
          "name": "Get System User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.system_user_id).to.eql(parseInt(pm.environment.get('created_tenantadmin_id')));",
                  "});",
                  "",
                  "pm.test('User has complete data structure', function () {",
                  "    var jsonData = pm.response.json();",
                  "    const user = jsonData.data;",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('full_name');",
                  "    pm.expect(user).to.have.property('email_address');",
                  "    pm.expect(user).to.have.property('role_type');",
                  "    pm.expect(user).to.have.property('tenant_id');",
                  "    pm.expect(user).to.have.property('system_user_status');",
                  "    pm.expect(user).to.have.property('last_login_at');",
                  "    pm.expect(user).to.have.property('login_attempts');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users/{{created_tenantadmin_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{created_tenantadmin_id}}"]
            },
            "description": "Get a specific system user by ID. SuperAdmin can access any user."
          },
          "response": []
        },
        {
          "name": "Update System User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User updated successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.full_name).to.eql(pm.environment.get('updated_user_fullname'));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get('updated_user_email'));",
                  "    pm.expect(jsonData.data.system_user_status).to.eql('INACTIVE');",
                  "});",
                  "",
                  "pm.test('Updated audit fields', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('updated_at');",
                  "    pm.expect(jsonData.data).to.have.property('updated_by');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate updated user data",
                  "const timestamp = Date.now();",
                  "const updatedFullName = `Updated Tenant Admin ${timestamp}`;",
                  "const updatedEmail = `updated.tenantadmin.${timestamp}@lms.com`;",
                  "",
                  "pm.environment.set('updated_user_fullname', updatedFullName);",
                  "pm.environment.set('updated_user_email', updatedEmail);",
                  "pm.environment.set('updated_user_password', 'NewSecurePassword@123');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"{{updated_user_fullname}}\",\n    \"email\": \"{{updated_user_email}}\",\n    \"status\": \"INACTIVE\",\n    \"password\": \"{{updated_user_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users/{{created_tenantadmin_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{created_tenantadmin_id}}"]
            },
            "description": "Update system user information. SuperAdmin can update any user."
          },
          "response": []
        },
        {
          "name": "Update User Role (SuperAdmin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User role updated successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.role_type).to.eql('SUPER_ADMIN');",
                  "    pm.expect(jsonData.data.tenant_id).to.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"roleType\": \"SUPER_ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users/{{created_tenantadmin_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{created_tenantadmin_id}}"]
            },
            "description": "Update user role. Only SuperAdmin can change user roles."
          },
          "response": []
        },
        {
          "name": "Delete System User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('No response body for successful deletion', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users/{{created_superadmin_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{created_superadmin_id}}"]
            },
            "description": "Soft delete a system user. SuperAdmin can delete any user except themselves."
          },
          "response": []
        }
      ]
    },
    {
      "name": "TenantAdmin Operations",
      "description": "Operations that can be performed by users with the TenantAdmin role.",
      "item": [
        {
          "name": "Create TenantAdmin User in Own Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('TenantAdmin user created in own tenant', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.role_type).to.eql('TENANT_ADMIN');",
                  "    pm.expect(jsonData.data.tenant_id).to.eql(parseInt(pm.environment.get('tenantAdminTenantId')));",
                  "    ",
                  "    // Store created user ID",
                  "    pm.environment.set('tenant_created_user_id', jsonData.data.system_user_id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique user data for tenant admin creation",
                  "const timestamp = Date.now();",
                  "const username = `tenant_user_${timestamp}`;",
                  "const fullName = `Tenant User ${timestamp}`;",
                  "const email = `tenant.user.${timestamp}@lms.com`;",
                  "",
                  "pm.environment.set('tenant_new_username', username);",
                  "pm.environment.set('tenant_new_fullname', fullName);",
                  "pm.environment.set('tenant_new_email', email);",
                  "pm.environment.set('tenant_new_password', 'TenantPassword@123');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{tenant_new_username}}\",\n    \"fullName\": \"{{tenant_new_fullname}}\",\n    \"email\": \"{{tenant_new_email}}\",\n    \"password\": \"{{tenant_new_password}}\",\n    \"roleType\": \"TENANT_ADMIN\",\n    \"tenantId\": {{tenantAdminTenantId}},\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "TenantAdmin can create users within their own tenant."
          },
          "response": []
        },
        {
          "name": "Get Users in Own Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All users belong to same tenant', function () {",
                  "    var jsonData = pm.response.json();",
                  "    const tenantId = parseInt(pm.environment.get('tenantAdminTenantId'));",
                  "    if (jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(user => {",
                  "            pm.expect(user.tenant_id).to.eql(tenantId);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["system-users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "TenantAdmin can only see users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Get User in Own Tenant by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User belongs to same tenant', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.tenant_id).to.eql(parseInt(pm.environment.get('tenantAdminTenantId')));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users/{{tenant_created_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{tenant_created_user_id}}"]
            },
            "description": "TenantAdmin can access users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Update User in Own Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User updated successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.full_name).to.eql(pm.environment.get('tenant_updated_fullname'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate updated data",
                  "const timestamp = Date.now();",
                  "const updatedFullName = `Updated Tenant User ${timestamp}`;",
                  "",
                  "pm.environment.set('tenant_updated_fullname', updatedFullName);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"{{tenant_updated_fullname}}\",\n    \"status\": \"SUSPENDED\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users/{{tenant_created_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{tenant_created_user_id}}"]
            },
            "description": "TenantAdmin can update users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Delete User in Own Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users/{{tenant_created_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{tenant_created_user_id}}"]
            },
            "description": "TenantAdmin can delete users in their own tenant."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authorization & Security Tests",
      "description": "Tests for authorization rules and security restrictions.",
      "item": [
        {
          "name": "TenantAdmin - Try to Create SuperAdmin (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates forbidden action', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('cannot create super admin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate test data for forbidden creation",
                  "const timestamp = Date.now();",
                  "pm.environment.set('forbidden_superadmin_username', `forbidden_super_${timestamp}`);",
                  "pm.environment.set('forbidden_superadmin_email', `forbidden.super.${timestamp}@lms.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{forbidden_superadmin_username}}\",\n    \"fullName\": \"Forbidden Super Admin\",\n    \"email\": \"{{forbidden_superadmin_email}}\",\n    \"password\": \"ForbiddenPassword@123\",\n    \"roleType\": \"SUPER_ADMIN\",\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "TenantAdmin should not be able to create SuperAdmin users."
          },
          "response": []
        },
        {
          "name": "TenantAdmin - Try to Create User in Other Tenant (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates tenant restriction', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('own tenant');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set different tenant ID",
                  "const currentTenantId = parseInt(pm.environment.get('tenantAdminTenantId'));",
                  "const otherTenantId = currentTenantId === 1 ? 2 : 1;",
                  "pm.environment.set('other_tenant_id', otherTenantId);",
                  "",
                  "// Generate test data",
                  "const timestamp = Date.now();",
                  "pm.environment.set('forbidden_user_username', `forbidden_user_${timestamp}`);",
                  "pm.environment.set('forbidden_user_email', `forbidden.user.${timestamp}@lms.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{forbidden_user_username}}\",\n    \"fullName\": \"Forbidden User\",\n    \"email\": \"{{forbidden_user_email}}\",\n    \"password\": \"ForbiddenPassword@123\",\n    \"roleType\": \"TENANT_ADMIN\",\n    \"tenantId\": {{other_tenant_id}},\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "TenantAdmin should not be able to create users in other tenants."
          },
          "response": []
        },
        {
          "name": "TenantAdmin - Try to Access User in Other Tenant (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates access restriction', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('another tenant');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use SuperAdmin user ID (should be in different tenant context)",
                  "pm.environment.set('other_tenant_user_id', pm.environment.get('superAdminUserId'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users/{{other_tenant_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{other_tenant_user_id}}"]
            },
            "description": "TenantAdmin should not be able to access users from other tenants."
          },
          "response": []
        },
        {
          "name": "TenantAdmin - Try to Update User Role (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates role change restriction', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('super admin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"roleType\": \"SUPER_ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users/{{tenantAdminUserId}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{tenantAdminUserId}}"]
            },
            "description": "TenantAdmin should not be able to change roles to SuperAdmin."
          },
          "response": []
        },
        {
          "name": "Try to Delete Own Account (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates self-deletion restriction', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('delete their own account');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{tenantAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/system-users/{{tenantAdminUserId}}",
              "host": ["{{base_url}}"],
              "path": ["system-users", "{{tenantAdminUserId}}"]
            },
            "description": "Users should not be able to delete their own accounts."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation & Error Handling",
      "description": "Tests for input validation and error scenarios.",
      "item": [
        {
          "name": "Create User with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates validation error', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.statusCode).to.eql(400);",
                  "    pm.expect(jsonData.message).to.include('validation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"ab\",\n    \"fullName\": \"a\",\n    \"email\": \"invalid-email\",\n    \"password\": \"123\",\n    \"roleType\": \"INVALID_ROLE\",\n    \"status\": \"INVALID_STATUS\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "Test validation with invalid user data."
          },
          "response": []
        },
        {
          "name": "Create User with Duplicate Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error indicates username conflict', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.errorCode).to.eql('USERNAME_EXISTS');",
                  "    pm.expect(jsonData.message).to.include('Username already exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"superadmin\",\n    \"fullName\": \"Duplicate Admin\",\n    \"email\": \"duplicate.admin@lms.com\",\n    \"password\": \"DuplicatePassword@123\",\n    \"roleType\": \"SUPER_ADMIN\",\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "Test creating a user with duplicate username."
          },
          "response": []
        },
        {
          "name": "Create User with Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error indicates email conflict', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.errorCode).to.eql('EMAIL_EXISTS');",
                  "    pm.expect(jsonData.message).to.include('Email already exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique username but use existing email",
                  "const timestamp = Date.now();",
                  "pm.environment.set('duplicate_email_username', `unique_user_${timestamp}`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{superAdminAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{duplicate_email_username}}\",\n    \"fullName\": \"Duplicate Email User\",\n    \"email\": \"superadmin@lms.com\",\n    \"password\": \"DuplicateEmail@123\",\n    \"roleType\": \"SUPER_ADMIN\",\n    \"status\": \"ACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/system-users",
              "host": ["{{base_url}}"],
              "path": ["system-users"]
            },
            "description": "Test creating a user with duplicate email address."
          },
          "response": []
        }
      ]
    }
  ]
}
