{
  "info": {
    "_postman_id": "specialization-management-collection-uuid",
    "name": "Specialization Management",
    "description": "Collection for managing academic specializations within the LMS. These endpoints handle creation, retrieval, update, and deletion of specializations with tenant isolation.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Specialization",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate random specialization name",
              "const subjects = ['AI', 'Robotics', 'Finance', 'Literature', 'Physics', 'Biology', 'History', 'Design'];",
              "const focus = ['Specialization', 'Track', 'Concentration', 'Focus'];",
              "const subject = subjects[Math.floor(Math.random() * subjects.length)];",
              "const focusType = focus[Math.floor(Math.random() * focus.length)];",
              "pm.environment.set('randomSpecializationName', `${subject} ${focusType}`);",
              "console.log(`Generated specialization name: ${pm.environment.get('randomSpecializationName')}`);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201 Created\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has success true and correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.statusCode).to.eql(201);",
              "    pm.expect(jsonData.message).to.eql(\"Specialization created successfully\");",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data).to.have.property('specialization_id');",
              "    pm.expect(jsonData.data.specialization_id).to.be.a('number').and.not.eql(0);",
              "    pm.expect(jsonData.data).to.have.property('specialization_name');",
              "    pm.expect(jsonData.data.specialization_name).to.eql(pm.environment.get('randomSpecializationName'));",
              "    pm.environment.set('specializationId', jsonData.data.specialization_id);",
              "    console.log(`Specialization created with ID: ${jsonData.data.specialization_id}`);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"specialization_name\": \"{{randomSpecializationName}}\",\n    \"program_ids\": [{{programId}}]\n}"
        },
        "url": {
          "raw": "{{base_url}}/specializations",
          "host": ["{{base_url}}"],
          "path": ["specializations"]
        },
        "description": "Creates a new specialization and associates it with one or more programs. The tenant ID is extracted from the JWT token."
      },
      "response": []
    },
    {
      "name": "List Specializations",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success true and specialization data array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.statusCode).to.eql(200);",
              "    pm.expect(jsonData.message).to.eql(\"Specializations retrieved successfully\");",
              "    pm.expect(jsonData.data).to.be.an('array');",
              "    if (jsonData.data.length > 0) {",
              "        const firstSpec = jsonData.data[0];",
              "        pm.expect(firstSpec).to.have.property('specialization_id');",
              "        pm.expect(firstSpec).to.have.property('specialization_name');",
              "        pm.expect(firstSpec).to.have.property('programs');",
              "        pm.expect(firstSpec.programs).to.be.an('array');",
              "        pm.expect(firstSpec).to.have.property('created_at');",
              "        pm.expect(firstSpec).to.have.property('updated_at');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations?programId={{programId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations"],
          "query": [
            { "key": "programId", "value": "{{programId}}", "description": "Filter by program ID" }
          ]
        },
        "description": "Retrieves a list of specializations, optionally filtered by programId."
      },
      "response": []
    },
    {
      "name": "Get Specialization by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success true and correct specialization data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const specializationId = parseInt(pm.environment.get(\"specializationId\"));",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.statusCode).to.eql(200);",
              "    pm.expect(jsonData.message).to.eql(\"Specialization retrieved successfully\");",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data.specialization_id).to.eql(specializationId);",
              "    pm.expect(jsonData.data).to.have.property('specialization_name');",
              "    pm.expect(jsonData.data).to.have.property('programs');",
              "    pm.expect(jsonData.data.programs).to.be.an('array');",
              "    pm.expect(jsonData.data).to.have.property('created_at');",
              "    pm.expect(jsonData.data).to.have.property('updated_at');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Retrieves a specialization by its ID."
      },
      "response": []
    },
    {
      "name": "Update Specialization",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate updated specialization name",
              "const subjects = ['Quantum', 'Neuro', 'Eco', 'Digital', 'Nano', 'Global', 'Urban', 'Cognitive'];",
              "const focus = ['Specialization', 'Track', 'Concentration', 'Focus'];",
              "const subject = subjects[Math.floor(Math.random() * subjects.length)];",
              "const focusType = focus[Math.floor(Math.random() * focus.length)];",
              "pm.environment.set('updatedSpecializationName', `${subject} ${focusType}`);",
              "console.log(`Generated updated specialization name: ${pm.environment.get('updatedSpecializationName')}`);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success true and updated specialization data\", function () {",
              "    const jsonData = pm.response.json();",
              "    const specializationId = parseInt(pm.environment.get(\"specializationId\"));",
              "    const updatedName = pm.environment.get(\"updatedSpecializationName\");",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.statusCode).to.eql(200);",
              "    pm.expect(jsonData.message).to.eql(\"Specialization updated successfully\");",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data.specialization_id).to.eql(specializationId);",
              "    pm.expect(jsonData.data.specialization_name).to.eql(updatedName);",
              "    pm.expect(jsonData.data).to.have.property('programs');",
              "    pm.expect(jsonData.data.programs).to.be.an('array');",
              "    pm.expect(jsonData.data).to.have.property('created_at');",
              "    pm.expect(jsonData.data).to.have.property('updated_at');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"specialization_name\": \"{{updatedSpecializationName}}\",\n    \"program_ids\": [{{programId}}]\n}"
        },
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Updates an existing specialization's information."
      },
      "response": []
    },
    {
      "name": "Delete Specialization",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204 No Content\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Deletes a specialization by its ID."
      },
      "response": []
    },
    {
      "name": "Update Specialization Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has success true and updated specialization status\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.statusCode).to.eql(200);",
              "    pm.expect(jsonData.data).to.be.an('object');",
              "    pm.expect(jsonData.data).to.have.property('is_active', false);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"is_active\": false\n}"
        },
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Updates the active status of a specialization."
      },
      "response": []
    },
    {
      "name": "Get Inactive Specialization",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Specialization is inactive\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('is_active', false);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Retrieves a specialization by its ID to verify inactive status."
      },
      "response": []
    },
    {
      "name": "List Specializations (filter inactive)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"All specializations are inactive\", function () {",
              "    const jsonData = pm.response.json();",
              "    jsonData.data.forEach(function (spec) {",
              "        pm.expect(spec.is_active).to.eql(false);",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations?is_active=false",
          "host": ["{{base_url}}"],
          "path": ["specializations"],
          "query": [
            { "key": "is_active", "value": "false" }
          ]
        },
        "description": "Retrieves a list of inactive specializations."
      },
      "response": []
    },
    {
      "name": "Restore Specialization Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Specialization is active again\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.have.property('is_active', true);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"is_active\": true\n}"
        },
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Restores an inactive specialization back to active status."
      },
      "response": []
    },
    {
      "name": "Verify Specialization Deletion",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404 Not Found\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/{{specializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{specializationId}}"]
        },
        "description": "Attempts to retrieve a soft-deleted specialization to verify that it's no longer accessible."
      },
      "response": []
    },
    {
      "name": "Create Specialization (Duplicate Name)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Use the same name as the last created specialization",
              "pm.environment.set('duplicateSpecializationName', pm.environment.get('randomSpecializationName'));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 409 Conflict\", function () {",
              "    pm.response.to.have.status(409);",
              "});",
              "pm.test(\"Duplicate name error\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.errorCode).to.eql('DUPLICATE_SPECIALIZATION_NAME');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"programId\": {{programId}},\n    \"specializationName\": \"{{duplicateSpecializationName}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/specializations",
          "host": ["{{base_url}}"],
          "path": ["specializations"]
        },
        "description": "Attempts to create a specialization with a name that already exists within the program."
      },
      "response": []
    },
    {
      "name": "Delete Temporary Specialization",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204 No Content\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/{{tempSpecializationId}}",
          "host": ["{{base_url}}"],
          "path": ["specializations", "{{tempSpecializationId}}"]
        },
        "description": "Deletes the temporary specialization created for the duplicate name test."
      },
      "response": []
    },
    {
      "name": "Invalid Specialization ID Format",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400 Bad Request\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/invalid",
          "host": ["{{base_url}}"],
          "path": ["specializations", "invalid"]
        },
        "description": "Attempts to retrieve a specialization with an invalid ID format to test input validation."
      },
      "response": []
    },
    {
      "name": "Get Active Specializations by Program",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has success true and specializations array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true, \"Response success should be true\");",
              "    pm.expect(jsonData.statusCode).to.eql(200, \"Status code should be 200\");",
              "    pm.expect(jsonData.message).to.eql(\"Active specializations retrieved successfully\", \"Message should indicate successful retrieval\");",
              "    pm.expect(jsonData.data).to.be.an('array', \"Data should be an array\");",
              "    if (jsonData.data.length > 0) {",
              "        const firstSpecialization = jsonData.data[0];",
              "        pm.expect(firstSpecialization).to.have.property('specialization_id');",
              "        pm.expect(firstSpecialization).to.have.property('specialization_name');",
              "        pm.expect(firstSpecialization).to.have.property('specialization_description');",
              "        pm.expect(firstSpecialization).to.have.property('program_id');",
              "        pm.expect(firstSpecialization).to.have.property('tenant_id');",
              "        pm.expect(firstSpecialization).to.have.property('is_active');",
              "        pm.expect(firstSpecialization).to.have.property('is_deleted');",
              "        pm.expect(firstSpecialization.is_active).to.be.true;",
              "        pm.expect(firstSpecialization.is_deleted).to.be.false;",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/specializations/by-program?program_id=1",
          "host": ["{{base_url}}"],
          "path": ["specializations", "by-program"],
          "query": [
            { "key": "program_id", "value": "1", "description": "Program ID to filter specializations by" }
          ]
        },
        "description": "Retrieves all active specializations for a specific program. Only returns specializations where is_active=true and is_deleted=false."
      },
      "response": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      { "key": "token", "value": "{{accessToken}}", "type": "string" }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script for the collection"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for the collection"
        ]
      }
    }
  ],
  "variable": [
    { "key": "accessToken", "value": "YOUR_JWT_TOKEN_HERE", "type": "string" },
    { "key": "base_url", "value": "http://localhost:3000/api/v1", "type": "string" },
    { "key": "programId", "value": "", "type": "string" },
    { "key": "specializationId", "value": "", "type": "string" },
    { "key": "randomSpecializationName", "value": "", "type": "string" },
    { "key": "updatedSpecializationName", "value": "", "type": "string" },
    { "key": "inactiveSpecializationId", "value": "", "type": "string" },
    { "key": "tempSpecializationId", "value": "", "type": "string" },
    { "key": "duplicateSpecializationName", "value": "", "type": "string" }
  ]
}
