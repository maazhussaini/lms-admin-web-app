{
  "info": {
    "_postman_id": "8e5f7c21-6d42-48da-bc3d-103e8e47b619",
    "name": "System User Management",
    "description": "Collection for managing system users in the Learning Management System (LMS). These endpoints handle user creation, retrieval, updates, and deletion with proper tenant isolation and role-based access controls.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "SuperAdmin Operations",
      "description": "Operations that can be performed by users with the SuperAdmin role.",
      "item": [
        {
          "name": "Login as SuperAdmin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    if (jsonData.data && jsonData.data.tokens) {",
                  "        pm.environment.set(\"accessToken\", jsonData.data.tokens.access_token);",
                  "        pm.environment.set(\"refreshToken\", jsonData.data.tokens.refresh_token);",
                  "        pm.environment.set(\"currentRole\", \"SUPERADMIN\");",
                  "    }",
                  "    ",
                  "    // Store user details for reference",
                  "    if (jsonData.data && jsonData.data.user) {",
                  "        pm.environment.set(\"currentUserId\", jsonData.data.user.id);",
                  "        console.log(`Logged in as SuperAdmin with ID ${jsonData.data.user.id}`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set SuperAdmin credentials",
                  "pm.environment.set(\"superadmin_email\", \"superadmin@lms.example.com\");",
                  "pm.environment.set(\"superadmin_password\", \"SuperAdmin@123\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email_address\": \"{{superadmin_email}}\",\n    \"password\": \"{{superadmin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Authenticate as a SuperAdmin user to perform privileged operations."
          },
          "response": []
        },
        {
          "name": "Create System User (SuperAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user created successfully\");",
                  "    ",
                  "    // Validate user data",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data.username).to.eql(pm.environment.get(\"new_username\"));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get(\"new_email\"));",
                  "    pm.expect(jsonData.data.role_id).to.eql(parseInt(pm.environment.get(\"new_role\")));",
                  "    ",
                  "    // Store the created user ID for future requests",
                  "    if (jsonData.data && jsonData.data.system_user_id) {",
                  "        pm.environment.set(\"created_user_id\", jsonData.data.system_user_id);",
                  "        console.log(`Created user with ID ${jsonData.data.system_user_id}`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate dynamic data for new user",
                  "const timestamp = new Date().getTime();",
                  "const username = `user_${timestamp}`;",
                  "const email = `user_${timestamp}@example.com`;",
                  "const fullName = `Test User ${timestamp}`;",
                  "",
                  "// Store values for validation in tests",
                  "pm.environment.set(\"new_username\", username);",
                  "pm.environment.set(\"new_email\", email);",
                  "pm.environment.set(\"new_fullname\", fullName);",
                  "",
                  "// Set role to TENANT_ADMIN (2)",
                  "pm.environment.set(\"new_role\", \"2\");",
                  "",
                  "// Set tenant ID for the new TENANT_ADMIN",
                  "pm.environment.set(\"new_tenant_id\", \"1\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{new_username}}\",\n    \"fullName\": \"{{new_fullname}}\",\n    \"email\": \"{{new_email}}\",\n    \"password\": \"Password123!\",\n    \"role\": {{new_role}},\n    \"tenantId\": {{new_tenant_id}},\n    \"status\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Create a new system user (TENANT_ADMIN) with the SuperAdmin role."
          },
          "response": []
        },
        {
          "name": "Create SuperAdmin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user created successfully\");",
                  "    ",
                  "    // Validate user data",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data.username).to.eql(pm.environment.get(\"new_superadmin_username\"));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get(\"new_superadmin_email\"));",
                  "    pm.expect(jsonData.data.role_id).to.eql(1); // SUPERADMIN role",
                  "    pm.expect(jsonData.data.tenant_id).to.be.null; // SuperAdmin has no tenant",
                  "    ",
                  "    // Store the created user ID for future requests",
                  "    if (jsonData.data && jsonData.data.system_user_id) {",
                  "        pm.environment.set(\"created_superadmin_id\", jsonData.data.system_user_id);",
                  "        console.log(`Created SuperAdmin user with ID ${jsonData.data.system_user_id}`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate dynamic data for new SuperAdmin user",
                  "const timestamp = new Date().getTime();",
                  "const username = `superadmin_${timestamp}`;",
                  "const email = `superadmin_${timestamp}@example.com`;",
                  "const fullName = `Super Admin ${timestamp}`;",
                  "",
                  "// Store values for validation in tests",
                  "pm.environment.set(\"new_superadmin_username\", username);",
                  "pm.environment.set(\"new_superadmin_email\", email);",
                  "pm.environment.set(\"new_superadmin_fullname\", fullName);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{new_superadmin_username}}\",\n    \"fullName\": \"{{new_superadmin_fullname}}\",\n    \"email\": \"{{new_superadmin_email}}\",\n    \"password\": \"SuperAdmin123!\",\n    \"role\": 1,\n    \"status\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Create a new SuperAdmin user. This can only be done by another SuperAdmin."
          },
          "response": []
        },
        {
          "name": "Get All Users (SuperAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct pagination structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"System users retrieved\");",
                  "    ",
                  "    // Validate pagination",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data.items).to.be.an('array');",
                  "    pm.expect(jsonData.data.pagination).to.be.an('object');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('total');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('totalPages');",
                  "    ",
                  "    // Check if our recently created user is in the list",
                  "    const createdUserId = parseInt(pm.environment.get(\"created_user_id\"));",
                  "    const foundUser = jsonData.data.items.find(user => user.system_user_id === createdUserId);",
                  "    ",
                  "    if (foundUser) {",
                  "        console.log(`Found our created user in the list`);",
                  "        pm.test(\"Created user found in list\", function() {",
                  "            pm.expect(foundUser.username).to.eql(pm.environment.get(\"new_username\"));",
                  "            pm.expect(foundUser.email_address).to.eql(pm.environment.get(\"new_email\"));",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all system users with pagination. As SuperAdmin, this will retrieve users from all tenants."
          },
          "response": []
        },
        {
          "name": "Get All Users with Filters (SuperAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has filtered results\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    // Validate all returned users have the filtered role",
                  "    const roleFilter = parseInt(pm.environment.get(\"role_filter\"));",
                  "    const tenantFilter = parseInt(pm.environment.get(\"tenant_filter\"));",
                  "    ",
                  "    if (jsonData.data && jsonData.data.items && jsonData.data.items.length > 0) {",
                  "        jsonData.data.items.forEach(user => {",
                  "            pm.expect(user.role_id).to.eql(roleFilter);",
                  "            ",
                  "            if (roleFilter === 2) { // TENANT_ADMIN",
                  "                pm.expect(user.tenant_id).to.eql(tenantFilter);",
                  "            }",
                  "        });",
                  "        ",
                  "        console.log(`Found ${jsonData.data.items.length} users matching filters`);",
                  "    } else {",
                  "        console.log('No users found matching filters');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set filter values",
                  "pm.environment.set(\"role_filter\", \"2\"); // TENANT_ADMIN",
                  "pm.environment.set(\"tenant_filter\", \"1\"); // Tenant ID 1",
                  "pm.environment.set(\"status_filter\", \"1\"); // ACTIVE"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=10&role={{role_filter}}&tenantId={{tenant_filter}}&status={{status_filter}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "role",
                  "value": "{{role_filter}}"
                },
                {
                  "key": "tenantId",
                  "value": "{{tenant_filter}}"
                },
                {
                  "key": "status",
                  "value": "{{status_filter}}"
                }
              ]
            },
            "description": "Get system users with filters applied. SuperAdmin can filter by role, tenant, and status."
          },
          "response": []
        },
        {
          "name": "Get User by ID (SuperAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user retrieved successfully\");",
                  "    ",
                  "    // Validate user data",
                  "    const userId = parseInt(pm.environment.get(\"created_user_id\"));",
                  "    pm.expect(jsonData.data.system_user_id).to.eql(userId);",
                  "    pm.expect(jsonData.data.username).to.eql(pm.environment.get(\"new_username\"));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get(\"new_email\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Get a specific system user by ID. SuperAdmin can access any user."
          },
          "response": []
        },
        {
          "name": "Update User (SuperAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user updated successfully\");",
                  "    ",
                  "    // Validate updated user data",
                  "    pm.expect(jsonData.data.system_user_id).to.eql(parseInt(pm.environment.get(\"created_user_id\")));",
                  "    pm.expect(jsonData.data.full_name).to.eql(pm.environment.get(\"updated_fullname\"));",
                  "    pm.expect(jsonData.data.system_user_status).to.eql(parseInt(pm.environment.get(\"updated_status\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate updated values",
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set(\"updated_fullname\", `Updated User ${timestamp}`);",
                  "pm.environment.set(\"updated_status\", \"2\"); // INACTIVE"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"{{updated_fullname}}\",\n    \"status\": {{updated_status}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Update a system user. SuperAdmin can update any user."
          },
          "response": []
        },
        {
          "name": "Change User Role (SuperAdmin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated user with new role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user updated successfully\");",
                  "    ",
                  "    // Validate role change",
                  "    pm.expect(jsonData.data.system_user_id).to.eql(parseInt(pm.environment.get(\"created_superadmin_id\")));",
                  "    pm.expect(jsonData.data.role_id).to.eql(parseInt(pm.environment.get(\"new_role_id\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set new role ID (2 = TENANT_ADMIN)",
                  "pm.environment.set(\"new_role_id\", \"2\");",
                  "pm.environment.set(\"new_tenant_id\", \"1\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"role\": {{new_role_id}},\n    \"tenantId\": {{new_tenant_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{created_superadmin_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{created_superadmin_id}}"
              ]
            },
            "description": "Change a user's role. Only SuperAdmin can change roles."
          },
          "response": []
        },
        {
          "name": "Delete User (SuperAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "// Verify the deletion by attempting to get the user",
                  "const postRequest = {",
                  "    url: pm.environment.get(\"base_url\") + \"/users/\" + pm.environment.get(\"created_user_id\"),",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Content-Type': 'application/json',",
                  "        'Authorization': 'Bearer ' + pm.environment.get(\"accessToken\")",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(postRequest, function (err, res) {",
                  "    pm.test(\"User should no longer be accessible\", function () {",
                  "        pm.expect(res.code).to.be.oneOf([404, 400]);",
                  "        ",
                  "        if (res.code === 200) {",
                  "            // If we get 200, we need to check if the user is marked as deleted",
                  "            try {",
                  "                const userData = res.json();",
                  "                if (userData.data && userData.data.is_deleted) {",
                  "                    console.log('User was successfully soft-deleted');",
                  "                } else {",
                  "                    pm.expect.fail('User should be marked as deleted');",
                  "                }",
                  "            } catch (e) {",
                  "                console.log('Could not parse response JSON');",
                  "            }",
                  "        } else {",
                  "            console.log('User was successfully deleted (404 Not Found)');",
                  "        }",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Delete (soft-delete) a system user. SuperAdmin can delete any user except themselves."
          },
          "response": []
        }
      ]
    },
    {
      "name": "TenantAdmin Operations",
      "description": "Operations that can be performed by users with the TenantAdmin role.",
      "item": [
        {
          "name": "Login as TenantAdmin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    if (jsonData.data && jsonData.data.tokens) {",
                  "        pm.environment.set(\"accessToken\", jsonData.data.tokens.access_token);",
                  "        pm.environment.set(\"refreshToken\", jsonData.data.tokens.refresh_token);",
                  "        pm.environment.set(\"currentRole\", \"TENANT_ADMIN\");",
                  "    }",
                  "    ",
                  "    // Store user details for reference",
                  "    if (jsonData.data && jsonData.data.user) {",
                  "        pm.environment.set(\"currentUserId\", jsonData.data.user.id);",
                  "        pm.environment.set(\"currentTenantId\", jsonData.data.user.tenant_id);",
                  "        console.log(`Logged in as TenantAdmin with ID ${jsonData.data.user.id} for tenant ${jsonData.data.user.tenant_id}`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set TenantAdmin credentials",
                  "pm.environment.set(\"tenant_admin_email\", \"tenant_admin@example.com\");",
                  "pm.environment.set(\"tenant_admin_password\", \"TenantAdmin123!\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email_address\": \"{{tenant_admin_email}}\",\n    \"password\": \"{{tenant_admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Authenticate as a TenantAdmin user to perform tenant-specific operations."
          },
          "response": []
        },
        {
          "name": "Create Tenant User (TenantAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user created successfully\");",
                  "    ",
                  "    // Validate user data",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data.username).to.eql(pm.environment.get(\"new_tenant_username\"));",
                  "    pm.expect(jsonData.data.email_address).to.eql(pm.environment.get(\"new_tenant_email\"));",
                  "    pm.expect(jsonData.data.role_id).to.eql(parseInt(pm.environment.get(\"new_tenant_role\")));",
                  "    pm.expect(jsonData.data.tenant_id).to.eql(parseInt(pm.environment.get(\"currentTenantId\")));",
                  "    ",
                  "    // Store the created user ID for future requests",
                  "    if (jsonData.data && jsonData.data.system_user_id) {",
                  "        pm.environment.set(\"tenant_created_user_id\", jsonData.data.system_user_id);",
                  "        console.log(`Created tenant user with ID ${jsonData.data.system_user_id}`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate dynamic data for new tenant user",
                  "const timestamp = new Date().getTime();",
                  "const username = `tenant_user_${timestamp}`;",
                  "const email = `tenant_user_${timestamp}@example.com`;",
                  "const fullName = `Tenant User ${timestamp}`;",
                  "",
                  "// Store values for validation in tests",
                  "pm.environment.set(\"new_tenant_username\", username);",
                  "pm.environment.set(\"new_tenant_email\", email);",
                  "pm.environment.set(\"new_tenant_fullname\", fullName);",
                  "pm.environment.set(\"new_tenant_role\", \"2\"); // TENANT_ADMIN"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{new_tenant_username}}\",\n    \"fullName\": \"{{new_tenant_fullname}}\",\n    \"email\": \"{{new_tenant_email}}\",\n    \"password\": \"Password123!\",\n    \"role\": {{new_tenant_role}},\n    \"tenantId\": {{currentTenantId}},\n    \"status\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Create a new system user within the tenant. TenantAdmin can only create users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Create SuperAdmin User (TenantAdmin-Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Response has correct error structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.statusCode).to.eql(403);",
                  "    pm.expect(jsonData.message).to.include('cannot create super admin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate dynamic data",
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set(\"forbidden_username\", `superadmin_${timestamp}`);",
                  "pm.environment.set(\"forbidden_email\", `superadmin_${timestamp}@example.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{forbidden_username}}\",\n    \"fullName\": \"Forbidden SuperAdmin\",\n    \"email\": \"{{forbidden_email}}\",\n    \"password\": \"Password123!\",\n    \"role\": 1,\n    \"tenantId\": {{currentTenantId}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Attempt to create a SuperAdmin user as a TenantAdmin. This should be forbidden."
          },
          "response": []
        },
        {
          "name": "Get All Users (TenantAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has only users from current tenant\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    const currentTenantId = parseInt(pm.environment.get(\"currentTenantId\"));",
                  "    ",
                  "    // Verify all users belong to current tenant",
                  "    if (jsonData.data && jsonData.data.items && jsonData.data.items.length > 0) {",
                  "        jsonData.data.items.forEach(user => {",
                  "            pm.expect(user.tenant_id).to.eql(currentTenantId);",
                  "        });",
                  "        ",
                  "        console.log(`Found ${jsonData.data.items.length} users in tenant ${currentTenantId}`);",
                  "        ",
                  "        // Check if recently created tenant user is in the list",
                  "        const createdUserId = parseInt(pm.environment.get(\"tenant_created_user_id\"));",
                  "        const foundUser = jsonData.data.items.find(user => user.system_user_id === createdUserId);",
                  "        ",
                  "        if (foundUser) {",
                  "            console.log('Found our created tenant user in the list');",
                  "        }",
                  "    } else {",
                  "        console.log('No users found in tenant');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all system users within the tenant. TenantAdmin can only see users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Get User by ID (TenantAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    // Validate user data",
                  "    const userId = parseInt(pm.environment.get(\"tenant_created_user_id\"));",
                  "    pm.expect(jsonData.data.system_user_id).to.eql(userId);",
                  "    pm.expect(jsonData.data.tenant_id).to.eql(parseInt(pm.environment.get(\"currentTenantId\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{tenant_created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{tenant_created_user_id}}"
              ]
            },
            "description": "Get a specific user by ID. TenantAdmin can only access users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Get User from Another Tenant (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This should return 403 or 404 depending on implementation",
                  "pm.test(\"Status code indicates access denied\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
                  "});",
                  "",
                  "pm.test(\"Response has appropriate error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    ",
                  "    if (pm.response.code === 403) {",
                  "        pm.expect(jsonData.message).to.include('cannot access users from another tenant');",
                  "    } else if (pm.response.code === 404) {",
                  "        pm.expect(jsonData.message).to.include('not found');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{created_superadmin_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{created_superadmin_id}}"
              ]
            },
            "description": "Attempt to access a user from another tenant. This should be forbidden for TenantAdmin users."
          },
          "response": []
        },
        {
          "name": "Update Tenant User (TenantAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.eql(\"System user updated successfully\");",
                  "    ",
                  "    // Validate updated user data",
                  "    pm.expect(jsonData.data.system_user_id).to.eql(parseInt(pm.environment.get(\"tenant_created_user_id\")));",
                  "    pm.expect(jsonData.data.full_name).to.eql(pm.environment.get(\"tenant_updated_fullname\"));",
                  "    pm.expect(jsonData.data.system_user_status).to.eql(parseInt(pm.environment.get(\"tenant_updated_status\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate updated values",
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set(\"tenant_updated_fullname\", `Updated Tenant User ${timestamp}`);",
                  "pm.environment.set(\"tenant_updated_status\", \"3\"); // SUSPENDED"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"{{tenant_updated_fullname}}\",\n    \"status\": {{tenant_updated_status}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{tenant_created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{tenant_created_user_id}}"
              ]
            },
            "description": "Update a user within the tenant. TenantAdmin can only update users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Change Role to SuperAdmin (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Response has correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include('cannot assign super admin role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"role\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{tenant_created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{tenant_created_user_id}}"
              ]
            },
            "description": "Attempt to change a user's role to SuperAdmin as a TenantAdmin. This should be forbidden."
          },
          "response": []
        },
        {
          "name": "Delete Tenant User (TenantAdmin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "// Verify the deletion by attempting to get the user",
                  "const postRequest = {",
                  "    url: pm.environment.get(\"base_url\") + \"/users/\" + pm.environment.get(\"tenant_created_user_id\"),",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Content-Type': 'application/json',",
                  "        'Authorization': 'Bearer ' + pm.environment.get(\"accessToken\")",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(postRequest, function (err, res) {",
                  "    pm.test(\"User should no longer be accessible\", function () {",
                  "        pm.expect(res.code).to.be.oneOf([404, 400]);",
                  "        ",
                  "        if (res.code === 200) {",
                  "            try {",
                  "                const userData = res.json();",
                  "                if (userData.data && userData.data.is_deleted) {",
                  "                    console.log('User was successfully soft-deleted');",
                  "                } else {",
                  "                    pm.expect.fail('User should be marked as deleted');",
                  "                }",
                  "            } catch (e) {",
                  "                console.log('Could not parse response JSON');",
                  "            }",
                  "        } else {",
                  "            console.log('User was successfully deleted (404 Not Found)');",
                  "        }",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{tenant_created_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{tenant_created_user_id}}"
              ]
            },
            "description": "Delete a user within the tenant. TenantAdmin can only delete users in their own tenant."
          },
          "response": []
        },
        {
          "name": "Attempt to Delete Self (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include(\"cannot delete their own account\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{currentUserId}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{currentUserId}}"
              ]
            },
            "description": "Attempt to delete the currently logged-in user. This should be forbidden."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "description": "Tests for various error conditions and edge cases.",
      "item": [
        {
          "name": "Create User with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has validation errors\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
                  "    ",
                  "    // Check for specific validation errors",
                  "    const usernameError = jsonData.errors.find(error => error.param === 'username');",
                  "    const emailError = jsonData.errors.find(error => error.param === 'email');",
                  "    const passwordError = jsonData.errors.find(error => error.param === 'password');",
                  "    ",
                  "    if (usernameError) {",
                  "        console.log(`Username validation error: ${usernameError.msg}`);",
                  "    }",
                  "    ",
                  "    if (emailError) {",
                  "        console.log(`Email validation error: ${emailError.msg}`);",
                  "    }",
                  "    ",
                  "    if (passwordError) {",
                  "        console.log(`Password validation error: ${passwordError.msg}`);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"a\",\n    \"fullName\": \"\",\n    \"email\": \"not-an-email\",\n    \"password\": \"123\",\n    \"role\": 999,\n    \"status\": 999\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Attempt to create a user with invalid data to test validation."
          },
          "response": []
        },
        {
          "name": "Create User with Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409 Conflict\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response has correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include(\"already exists\");",
                  "    pm.expect(jsonData.errorCode).to.be.oneOf([\"EMAIL_EXISTS\", \"USERNAME_EXISTS\"]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set an existing email - using the SuperAdmin email",
                  "pm.environment.set(\"existing_email\", pm.environment.get(\"superadmin_email\"));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"unique_username_{{$timestamp}}\",\n    \"fullName\": \"Duplicate Email User\",\n    \"email\": \"{{existing_email}}\",\n    \"password\": \"Password123!\",\n    \"role\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Attempt to create a user with an email that already exists to test duplicate validation."
          },
          "response": []
        },
        {
          "name": "Get Non-Existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include(\"not found\");",
                  "    pm.expect(jsonData.statusCode).to.eql(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a non-existent user ID - very large number unlikely to exist",
                  "pm.environment.set(\"non_existent_user_id\", \"999999999\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{non_existent_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{non_existent_user_id}}"
              ]
            },
            "description": "Attempt to retrieve a user that does not exist to test 404 error handling."
          },
          "response": []
        }
      ]
    }
  ]
}